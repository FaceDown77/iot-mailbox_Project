
mini_project_bt_version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006430  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080065d0  080065d0  000075d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006820  08006820  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006828  08006828  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006828  08006828  00007828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800682c  0800682c  0000782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006830  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000068  08006898  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08006898  000083d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dba8  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f22  00000000  00000000  00015c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00017b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6d  00000000  00000000  000188c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172cc  00000000  00000000  0001932d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeb9  00000000  00000000  000305f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090339  00000000  00000000  0003f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf7eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000454c  00000000  00000000  000cf830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000d3d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065b8 	.word	0x080065b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080065b8 	.word	0x080065b8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	@ 0x38
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int prevScanFlag1 = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	@ 0x34
	char sendBuf[CMD_SIZE]={0};
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	222e      	movs	r2, #46	@ 0x2e
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 fbef 	bl	8005574 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d96:	f001 f903 	bl	8001fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9a:	f000 f93d 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9e:	f000 fab7 	bl	8001310 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000da2:	f000 fa61 	bl	8001268 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000da6:	f000 f9a1 	bl	80010ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000daa:	f000 f9ed 	bl	8001188 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000dae:	f000 fa85 	bl	80012bc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	497a      	ldr	r1, [pc, #488]	@ (8000fa0 <main+0x224>)
 8000db6:	487b      	ldr	r0, [pc, #492]	@ (8000fa4 <main+0x228>)
 8000db8:	f003 fa37 	bl	800422a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &btchar,1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	497a      	ldr	r1, [pc, #488]	@ (8000fa8 <main+0x22c>)
 8000dc0:	487a      	ldr	r0, [pc, #488]	@ (8000fac <main+0x230>)
 8000dc2:	f003 fa32 	bl	800422a <HAL_UART_Receive_IT>
  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000dc6:	487a      	ldr	r0, [pc, #488]	@ (8000fb0 <main+0x234>)
 8000dc8:	f002 f9dc 	bl	8003184 <HAL_TIM_Base_Start_IT>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <main+0x5a>
  {
	  Error_Handler();
 8000dd2:	f000 fe5d 	bl	8001a90 <Error_Handler>
  }
  printf("Start main() \r\n");
 8000dd6:	4877      	ldr	r0, [pc, #476]	@ (8000fb4 <main+0x238>)
 8000dd8:	f004 facc 	bl	8005374 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx2Flag)
 8000ddc:	4b76      	ldr	r3, [pc, #472]	@ (8000fb8 <main+0x23c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <main+0x78>
	  {
		  printf("recv2 : %s\r\n",rx2Data);
 8000de6:	4975      	ldr	r1, [pc, #468]	@ (8000fbc <main+0x240>)
 8000de8:	4875      	ldr	r0, [pc, #468]	@ (8000fc0 <main+0x244>)
 8000dea:	f004 fa5b 	bl	80052a4 <iprintf>
		  rx2Flag =0;
 8000dee:	4b72      	ldr	r3, [pc, #456]	@ (8000fb8 <main+0x23c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
		  //HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
	  }
	  if(btFlag)
 8000df4:	4b73      	ldr	r3, [pc, #460]	@ (8000fc4 <main+0x248>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d008      	beq.n	8000e10 <main+0x94>
	  {
		  printf("bt : %s\r\n",btData);
 8000dfe:	4972      	ldr	r1, [pc, #456]	@ (8000fc8 <main+0x24c>)
 8000e00:	4872      	ldr	r0, [pc, #456]	@ (8000fcc <main+0x250>)
 8000e02:	f004 fa4f 	bl	80052a4 <iprintf>
		  btFlag =0;
 8000e06:	4b6f      	ldr	r3, [pc, #444]	@ (8000fc4 <main+0x248>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
		  bluetooth_Event();
 8000e0c:	f000 fb40 	bl	8001490 <bluetooth_Event>
	  }

	  if(scanFlag1 == 1)
 8000e10:	4b6f      	ldr	r3, [pc, #444]	@ (8000fd0 <main+0x254>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d10c      	bne.n	8000e32 <main+0xb6>
	  {
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	486e      	ldr	r0, [pc, #440]	@ (8000fd4 <main+0x258>)
 8000e1c:	f002 fa6e 	bl	80032fc <HAL_TIM_IC_Start_IT>
	  	  HCSR04_Read();
 8000e20:	f000 fd34 	bl	800188c <HCSR04_Read>
#if DEBUG
	  	  printf("%d cm\r\n",Distance);
 8000e24:	4b6c      	ldr	r3, [pc, #432]	@ (8000fd8 <main+0x25c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	486c      	ldr	r0, [pc, #432]	@ (8000fdc <main+0x260>)
 8000e2c:	f004 fa3a 	bl	80052a4 <iprintf>
 8000e30:	e01f      	b.n	8000e72 <main+0xf6>
#endif
	  }
#if DEBUG
	  else
	  {
		  printf("scanFlag1 : %d\t", scanFlag1);
 8000e32:	4b67      	ldr	r3, [pc, #412]	@ (8000fd0 <main+0x254>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4869      	ldr	r0, [pc, #420]	@ (8000fe0 <main+0x264>)
 8000e3a:	f004 fa33 	bl	80052a4 <iprintf>
		  printf("BTN1_State : %d\t",BTN1);
 8000e3e:	4b69      	ldr	r3, [pc, #420]	@ (8000fe4 <main+0x268>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4619      	mov	r1, r3
 8000e44:	4868      	ldr	r0, [pc, #416]	@ (8000fe8 <main+0x26c>)
 8000e46:	f004 fa2d 	bl	80052a4 <iprintf>
		  printf("%d cm\t",Distance);
 8000e4a:	4b63      	ldr	r3, [pc, #396]	@ (8000fd8 <main+0x25c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4866      	ldr	r0, [pc, #408]	@ (8000fec <main+0x270>)
 8000e52:	f004 fa27 	bl	80052a4 <iprintf>
		  printf("mailOnFlag1 : %d\t", mailOnFlag1);
 8000e56:	4b66      	ldr	r3, [pc, #408]	@ (8000ff0 <main+0x274>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4865      	ldr	r0, [pc, #404]	@ (8000ff4 <main+0x278>)
 8000e5e:	f004 fa21 	bl	80052a4 <iprintf>
		  printf("Min : %d, Sec : %d\n\r",tim2Min, tim2Sec);
 8000e62:	4b65      	ldr	r3, [pc, #404]	@ (8000ff8 <main+0x27c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a65      	ldr	r2, [pc, #404]	@ (8000ffc <main+0x280>)
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4864      	ldr	r0, [pc, #400]	@ (8001000 <main+0x284>)
 8000e6e:	f004 fa19 	bl	80052a4 <iprintf>
	  }
#endif

	  if((!scanFlag1 && BTN1) || (tim2Sec == 0) || scanReq1)
 8000e72:	4b57      	ldr	r3, [pc, #348]	@ (8000fd0 <main+0x254>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d103      	bne.n	8000e82 <main+0x106>
 8000e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8000fe4 <main+0x268>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d107      	bne.n	8000e92 <main+0x116>
 8000e82:	4b5e      	ldr	r3, [pc, #376]	@ (8000ffc <main+0x280>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <main+0x116>
 8000e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8001004 <main+0x288>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d012      	beq.n	8000eb8 <main+0x13c>
	  {
		  scanFlag1 = 1;
 8000e92:	4b4f      	ldr	r3, [pc, #316]	@ (8000fd0 <main+0x254>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
		  BTN1 = 0;
 8000e98:	4b52      	ldr	r3, [pc, #328]	@ (8000fe4 <main+0x268>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
		  tim2Sec = 0;
 8000e9e:	4b57      	ldr	r3, [pc, #348]	@ (8000ffc <main+0x280>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
		  tim2Min = 0;
 8000ea4:	4b54      	ldr	r3, [pc, #336]	@ (8000ff8 <main+0x27c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
		  if(scanReq1)
 8000eaa:	4b56      	ldr	r3, [pc, #344]	@ (8001004 <main+0x288>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <main+0x13c>
			  scanReq1 = 0;
 8000eb2:	4b54      	ldr	r3, [pc, #336]	@ (8001004 <main+0x288>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
	  }

	  if(tim2Sec > 5)	//mail scanning in 5sec
 8000eb8:	4b50      	ldr	r3, [pc, #320]	@ (8000ffc <main+0x280>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d902      	bls.n	8000ec6 <main+0x14a>
		  scanFlag1 = 0;
 8000ec0:	4b43      	ldr	r3, [pc, #268]	@ (8000fd0 <main+0x254>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]

	  if(Distance > 0 && Distance < MARGIN && scanFlag1)
 8000ec6:	4b44      	ldr	r3, [pc, #272]	@ (8000fd8 <main+0x25c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00b      	beq.n	8000ee6 <main+0x16a>
 8000ece:	4b42      	ldr	r3, [pc, #264]	@ (8000fd8 <main+0x25c>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b0b      	cmp	r3, #11
 8000ed4:	d807      	bhi.n	8000ee6 <main+0x16a>
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd0 <main+0x254>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <main+0x16a>
		  mailOnFlag1 = 1;
 8000ede:	4b44      	ldr	r3, [pc, #272]	@ (8000ff0 <main+0x274>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e00a      	b.n	8000efc <main+0x180>
	  else if(Distance >= 5 && scanFlag1)
 8000ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8000fd8 <main+0x25c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d906      	bls.n	8000efc <main+0x180>
 8000eee:	4b38      	ldr	r3, [pc, #224]	@ (8000fd0 <main+0x254>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <main+0x180>
		  mailOnFlag1 = 0;
 8000ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff0 <main+0x274>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, mailOnFlag1);
 8000efc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff0 <main+0x274>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f08:	483f      	ldr	r0, [pc, #252]	@ (8001008 <main+0x28c>)
 8000f0a:	f001 fc07 	bl	800271c <HAL_GPIO_WritePin>

	  if(prevScanFlag1 != scanFlag1)
 8000f0e:	4b30      	ldr	r3, [pc, #192]	@ (8000fd0 <main+0x254>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d03f      	beq.n	8000f98 <main+0x21c>
	  {
		  if(scanFlag1 == 1)
 8000f18:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <main+0x254>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d103      	bne.n	8000f28 <main+0x1ac>
		  {
			  prevScanFlag1 = scanFlag1;
 8000f20:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <main+0x254>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f26:	e037      	b.n	8000f98 <main+0x21c>
		  }
		  else if(scanFlag1 == 0)
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <main+0x254>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d133      	bne.n	8000f98 <main+0x21c>
		  {
			  prevScanFlag1 = scanFlag1;
 8000f30:	4b27      	ldr	r3, [pc, #156]	@ (8000fd0 <main+0x254>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34

			  if(mailOnFlag1)
 8000f36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <main+0x274>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d016      	beq.n	8000f6c <main+0x1f0>
			  {
			  	  sprintf(sendBuf,"[PJT_SQL]MAIL@o\n");
 8000f3e:	463b      	mov	r3, r7
 8000f40:	4932      	ldr	r1, [pc, #200]	@ (800100c <main+0x290>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 fa1e 	bl	8005384 <siprintf>
			  	  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f952 	bl	80001f4 <strlen>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4639      	mov	r1, r7
 8000f56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f5a:	4814      	ldr	r0, [pc, #80]	@ (8000fac <main+0x230>)
 8000f5c:	f003 f8da 	bl	8004114 <HAL_UART_Transmit>
			  	  //esp_send_data(sendBuf);
			  	  printf("Debug send : %s\r\n",sendBuf);
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	482a      	ldr	r0, [pc, #168]	@ (8001010 <main+0x294>)
 8000f66:	f004 f99d 	bl	80052a4 <iprintf>
 8000f6a:	e015      	b.n	8000f98 <main+0x21c>
			  }
			  else
			  {
				  sprintf(sendBuf,"[PJT_SQL]MAIL@x\n");
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4929      	ldr	r1, [pc, #164]	@ (8001014 <main+0x298>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 fa07 	bl	8005384 <siprintf>
				  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 8000f76:	463b      	mov	r3, r7
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff f93b 	bl	80001f4 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4639      	mov	r1, r7
 8000f84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f88:	4808      	ldr	r0, [pc, #32]	@ (8000fac <main+0x230>)
 8000f8a:	f003 f8c3 	bl	8004114 <HAL_UART_Transmit>
				  //esp_send_data(sendBuf);
				  printf("Debug send : %s\r\n",sendBuf);
 8000f8e:	463b      	mov	r3, r7
 8000f90:	4619      	mov	r1, r3
 8000f92:	481f      	ldr	r0, [pc, #124]	@ (8001010 <main+0x294>)
 8000f94:	f004 f986 	bl	80052a4 <iprintf>
			  }
		  }
	  }

	  HAL_Delay(100);
 8000f98:	2064      	movs	r0, #100	@ 0x64
 8000f9a:	f001 f873 	bl	8002084 <HAL_Delay>
	  if(rx2Flag)
 8000f9e:	e71d      	b.n	8000ddc <main+0x60>
 8000fa0:	200001a4 	.word	0x200001a4
 8000fa4:	20000114 	.word	0x20000114
 8000fa8:	200001db 	.word	0x200001db
 8000fac:	2000015c 	.word	0x2000015c
 8000fb0:	20000084 	.word	0x20000084
 8000fb4:	080065d0 	.word	0x080065d0
 8000fb8:	200001a5 	.word	0x200001a5
 8000fbc:	200001a8 	.word	0x200001a8
 8000fc0:	080065e0 	.word	0x080065e0
 8000fc4:	200001da 	.word	0x200001da
 8000fc8:	200001dc 	.word	0x200001dc
 8000fcc:	080065f0 	.word	0x080065f0
 8000fd0:	2000025c 	.word	0x2000025c
 8000fd4:	200000cc 	.word	0x200000cc
 8000fd8:	2000021d 	.word	0x2000021d
 8000fdc:	080065fc 	.word	0x080065fc
 8000fe0:	08006604 	.word	0x08006604
 8000fe4:	20000268 	.word	0x20000268
 8000fe8:	08006614 	.word	0x08006614
 8000fec:	08006628 	.word	0x08006628
 8000ff0:	20000264 	.word	0x20000264
 8000ff4:	08006630 	.word	0x08006630
 8000ff8:	20000258 	.word	0x20000258
 8000ffc:	20000254 	.word	0x20000254
 8001000:	08006644 	.word	0x08006644
 8001004:	20000260 	.word	0x20000260
 8001008:	40020800 	.word	0x40020800
 800100c:	0800665c 	.word	0x0800665c
 8001010:	08006670 	.word	0x08006670
 8001014:	08006684 	.word	0x08006684

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	@ 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2230      	movs	r2, #48	@ 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f004 faa4 	bl	8005574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <SystemClock_Config+0xcc>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <SystemClock_Config+0xcc>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	@ 0x40
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <SystemClock_Config+0xcc>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <SystemClock_Config+0xd0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a21      	ldr	r2, [pc, #132]	@ (80010e8 <SystemClock_Config+0xd0>)
 8001062:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <SystemClock_Config+0xd0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001074:	2301      	movs	r3, #1
 8001076:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001078:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001082:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001088:	2308      	movs	r3, #8
 800108a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800108c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001090:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001092:	2304      	movs	r3, #4
 8001094:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001096:	2304      	movs	r3, #4
 8001098:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fb88 	bl	80027b4 <HAL_RCC_OscConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010aa:	f000 fcf1 	bl	8001a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	230f      	movs	r3, #15
 80010b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2302      	movs	r3, #2
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2102      	movs	r1, #2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fdea 	bl	8002ca4 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010d6:	f000 fcdb 	bl	8001a90 <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3750      	adds	r7, #80	@ 0x50
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001108:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_TIM2_Init+0x98>)
 800110a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800110e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_TIM2_Init+0x98>)
 8001112:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001116:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_TIM2_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_TIM2_Init+0x98>)
 8001120:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_TIM2_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_TIM2_Init+0x98>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001132:	4814      	ldr	r0, [pc, #80]	@ (8001184 <MX_TIM2_Init+0x98>)
 8001134:	f001 ffd6 	bl	80030e4 <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800113e:	f000 fca7 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001146:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	4619      	mov	r1, r3
 800114e:	480d      	ldr	r0, [pc, #52]	@ (8001184 <MX_TIM2_Init+0x98>)
 8001150:	f002 fb7a 	bl	8003848 <HAL_TIM_ConfigClockSource>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800115a:	f000 fc99 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	@ (8001184 <MX_TIM2_Init+0x98>)
 800116c:	f002 ff00 	bl	8003f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001176:	f000 fc8b 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000084 	.word	0x20000084

08001188 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <MX_TIM3_Init+0xd8>)
 80011b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001264 <MX_TIM3_Init+0xdc>)
 80011b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80011b8:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <MX_TIM3_Init+0xd8>)
 80011ba:	2253      	movs	r2, #83	@ 0x53
 80011bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <MX_TIM3_Init+0xd8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80011c4:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_TIM3_Init+0xd8>)
 80011c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <MX_TIM3_Init+0xd8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <MX_TIM3_Init+0xd8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011d8:	4821      	ldr	r0, [pc, #132]	@ (8001260 <MX_TIM3_Init+0xd8>)
 80011da:	f001 ff83 	bl	80030e4 <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80011e4:	f000 fc54 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ee:	f107 0318 	add.w	r3, r7, #24
 80011f2:	4619      	mov	r1, r3
 80011f4:	481a      	ldr	r0, [pc, #104]	@ (8001260 <MX_TIM3_Init+0xd8>)
 80011f6:	f002 fb27 	bl	8003848 <HAL_TIM_ConfigClockSource>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001200:	f000 fc46 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001204:	4816      	ldr	r0, [pc, #88]	@ (8001260 <MX_TIM3_Init+0xd8>)
 8001206:	f002 f81f 	bl	8003248 <HAL_TIM_IC_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001210:	f000 fc3e 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	480f      	ldr	r0, [pc, #60]	@ (8001260 <MX_TIM3_Init+0xd8>)
 8001224:	f002 fea4 	bl	8003f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800122e:	f000 fc2f 	bl	8001a90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001236:	2301      	movs	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_TIM3_Init+0xd8>)
 800124a:	f002 fa61 	bl	8003710 <HAL_TIM_IC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001254:	f000 fc1c 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	@ 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200000cc 	.word	0x200000cc
 8001264:	40000400 	.word	0x40000400

08001268 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 800126e:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <MX_USART2_UART_Init+0x50>)
 8001270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <MX_USART2_UART_Init+0x4c>)
 80012a0:	f002 fee8 	bl	8004074 <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012aa:	f000 fbf1 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000114 	.word	0x20000114
 80012b8:	40004400 	.word	0x40004400

080012bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_USART6_UART_Init+0x4c>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	@ (800130c <MX_USART6_UART_Init+0x50>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <MX_USART6_UART_Init+0x4c>)
 80012c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_USART6_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_USART6_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <MX_USART6_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_USART6_UART_Init+0x4c>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <MX_USART6_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_USART6_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_USART6_UART_Init+0x4c>)
 80012f4:	f002 febe 	bl	8004074 <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80012fe:	f000 fbc7 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000015c 	.word	0x2000015c
 800130c:	40011400 	.word	0x40011400

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b43      	ldr	r3, [pc, #268]	@ (8001438 <MX_GPIO_Init+0x128>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a42      	ldr	r2, [pc, #264]	@ (8001438 <MX_GPIO_Init+0x128>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b40      	ldr	r3, [pc, #256]	@ (8001438 <MX_GPIO_Init+0x128>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b3c      	ldr	r3, [pc, #240]	@ (8001438 <MX_GPIO_Init+0x128>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a3b      	ldr	r2, [pc, #236]	@ (8001438 <MX_GPIO_Init+0x128>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b39      	ldr	r3, [pc, #228]	@ (8001438 <MX_GPIO_Init+0x128>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b35      	ldr	r3, [pc, #212]	@ (8001438 <MX_GPIO_Init+0x128>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a34      	ldr	r2, [pc, #208]	@ (8001438 <MX_GPIO_Init+0x128>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b32      	ldr	r3, [pc, #200]	@ (8001438 <MX_GPIO_Init+0x128>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <MX_GPIO_Init+0x128>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a2d      	ldr	r2, [pc, #180]	@ (8001438 <MX_GPIO_Init+0x128>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <MX_GPIO_Init+0x128>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG1_Pin|RUN_LED_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800139c:	4827      	ldr	r0, [pc, #156]	@ (800143c <MX_GPIO_Init+0x12c>)
 800139e:	f001 f9bd 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a8:	4825      	ldr	r0, [pc, #148]	@ (8001440 <MX_GPIO_Init+0x130>)
 80013aa:	f001 f9b7 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	481e      	ldr	r0, [pc, #120]	@ (8001440 <MX_GPIO_Init+0x130>)
 80013c6:	f001 f825 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TRIG1_Pin RUN_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIG1_Pin|RUN_LED_Pin;
 80013ca:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4816      	ldr	r0, [pc, #88]	@ (800143c <MX_GPIO_Init+0x12c>)
 80013e4:	f001 f816 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80013e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	@ (8001440 <MX_GPIO_Init+0x130>)
 8001402:	f001 f807 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCAN_BTN1_Pin */
  GPIO_InitStruct.Pin = SCAN_BTN1_Pin;
 8001406:	2340      	movs	r3, #64	@ 0x40
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800140e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SCAN_BTN1_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	480a      	ldr	r0, [pc, #40]	@ (8001444 <MX_GPIO_Init+0x134>)
 800141c:	f000 fffa 	bl	8002414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2017      	movs	r0, #23
 8001426:	f000 ff2c 	bl	8002282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800142a:	2017      	movs	r0, #23
 800142c:	f000 ff45 	bl	80022ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	@ 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020800 	.word	0x40020800
 8001444:	40020400 	.word	0x40020400

08001448 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	b29b      	uxth	r3, r3
 8001454:	2201      	movs	r2, #1
 8001456:	4619      	mov	r1, r3
 8001458:	4803      	ldr	r0, [pc, #12]	@ (8001468 <MX_GPIO_LED_ON+0x20>)
 800145a:	f001 f95f 	bl	800271c <HAL_GPIO_WritePin>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40020000 	.word	0x40020000

0800146c <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	b29b      	uxth	r3, r3
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	4803      	ldr	r0, [pc, #12]	@ (800148c <MX_GPIO_LED_OFF+0x20>)
 800147e:	f001 f94d 	bl	800271c <HAL_GPIO_WritePin>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40020000 	.word	0x40020000

08001490 <bluetooth_Event>:
void bluetooth_Event()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0a4      	sub	sp, #144	@ 0x90
 8001494:	af02      	add	r7, sp, #8
	int i=0;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	char * pToken;
	char * pArray[ARR_CNT]={0};
 800149c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
	char recvBuf[CMD_SIZE]={0};
 80014ac:	2300      	movs	r3, #0
 80014ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014b4:	222e      	movs	r2, #46	@ 0x2e
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 f85b 	bl	8005574 <memset>
	char sendBuf[CMD_SIZE]={0};
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	222e      	movs	r2, #46	@ 0x2e
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 f852 	bl	8005574 <memset>
	strcpy(recvBuf,btData);
 80014d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014d4:	495c      	ldr	r1, [pc, #368]	@ (8001648 <bluetooth_Event+0x1b8>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 f923 	bl	8005722 <strcpy>

	printf("btData : %s\r\n",btData);
 80014dc:	495a      	ldr	r1, [pc, #360]	@ (8001648 <bluetooth_Event+0x1b8>)
 80014de:	485b      	ldr	r0, [pc, #364]	@ (800164c <bluetooth_Event+0x1bc>)
 80014e0:	f003 fee0 	bl	80052a4 <iprintf>

	pToken = strtok(recvBuf,"[@]");
 80014e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014e8:	4959      	ldr	r1, [pc, #356]	@ (8001650 <bluetooth_Event+0x1c0>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 f84a 	bl	8005584 <strtok>
 80014f0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	while(pToken != NULL)
 80014f4:	e017      	b.n	8001526 <bluetooth_Event+0x96>
	{
		pArray[i] =  pToken;
 80014f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	3388      	adds	r3, #136	@ 0x88
 80014fe:	443b      	add	r3, r7
 8001500:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001504:	f843 2c1c 	str.w	r2, [r3, #-28]
		if(++i >= ARR_CNT)
 8001508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800150c:	3301      	adds	r3, #1
 800150e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001512:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001516:	2b04      	cmp	r3, #4
 8001518:	dc0a      	bgt.n	8001530 <bluetooth_Event+0xa0>
			break;
		pToken = strtok(NULL,"[@]");
 800151a:	494d      	ldr	r1, [pc, #308]	@ (8001650 <bluetooth_Event+0x1c0>)
 800151c:	2000      	movs	r0, #0
 800151e:	f004 f831 	bl	8005584 <strtok>
 8001522:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	while(pToken != NULL)
 8001526:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1e3      	bne.n	80014f6 <bluetooth_Event+0x66>
 800152e:	e000      	b.n	8001532 <bluetooth_Event+0xa2>
			break;
 8001530:	bf00      	nop
	}
	//printf("pArray[0] : %s\r\n",pArray[0]);
	//printf("pArray[1] : %s\r\n",pArray[1]);
	//printf("pArray[2] : %s\r\n",pArray[2]);

	if(!strcmp(pArray[1],"LED"))
 8001532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001534:	4947      	ldr	r1, [pc, #284]	@ (8001654 <bluetooth_Event+0x1c4>)
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fe52 	bl	80001e0 <strcmp>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d120      	bne.n	8001584 <bluetooth_Event+0xf4>
	{
		if(!strcmp(pArray[2],"ON"))
 8001542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001544:	4944      	ldr	r1, [pc, #272]	@ (8001658 <bluetooth_Event+0x1c8>)
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fe4a 	bl	80001e0 <strcmp>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d103      	bne.n	800155a <bluetooth_Event+0xca>
		{
			MX_GPIO_LED_ON(LD2_Pin);
 8001552:	2020      	movs	r0, #32
 8001554:	f7ff ff78 	bl	8001448 <MX_GPIO_LED_ON>
 8001558:	e00a      	b.n	8001570 <bluetooth_Event+0xe0>
		}
		else if(!strcmp(pArray[2],"OFF"))
 800155a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800155c:	493f      	ldr	r1, [pc, #252]	@ (800165c <bluetooth_Event+0x1cc>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fe3e 	bl	80001e0 <strcmp>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <bluetooth_Event+0xe0>
		{
			MX_GPIO_LED_OFF(LD2_Pin);
 800156a:	2020      	movs	r0, #32
 800156c:	f7ff ff7e 	bl	800146c <MX_GPIO_LED_OFF>
		}
		sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8001570:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001572:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001574:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001576:	1d38      	adds	r0, r7, #4
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	460b      	mov	r3, r1
 800157c:	4938      	ldr	r1, [pc, #224]	@ (8001660 <bluetooth_Event+0x1d0>)
 800157e:	f003 ff01 	bl	8005384 <siprintf>
 8001582:	e04a      	b.n	800161a <bluetooth_Event+0x18a>
	}
	else if(!strcmp(pArray[1],"MAIL"))
 8001584:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001586:	4937      	ldr	r1, [pc, #220]	@ (8001664 <bluetooth_Event+0x1d4>)
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fe29 	bl	80001e0 <strcmp>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d132      	bne.n	80015fa <bluetooth_Event+0x16a>
	{
		if(!strcmp(pArray[2],"SCAN"))
 8001594:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001596:	4934      	ldr	r1, [pc, #208]	@ (8001668 <bluetooth_Event+0x1d8>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fe21 	bl	80001e0 <strcmp>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10c      	bne.n	80015be <bluetooth_Event+0x12e>
		{
			scanReq1 = 1;
 80015a4:	4b31      	ldr	r3, [pc, #196]	@ (800166c <bluetooth_Event+0x1dc>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
			sprintf(sendBuf,"[%s]%s@%sNING...\n",pArray[0],pArray[1],pArray[2]);
 80015aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015ac:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80015ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015b0:	1d38      	adds	r0, r7, #4
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	460b      	mov	r3, r1
 80015b6:	492e      	ldr	r1, [pc, #184]	@ (8001670 <bluetooth_Event+0x1e0>)
 80015b8:	f003 fee4 	bl	8005384 <siprintf>
 80015bc:	e02d      	b.n	800161a <bluetooth_Event+0x18a>
		}
		else if(!strcmp(pArray[2],"STATE"))
 80015be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015c0:	492c      	ldr	r1, [pc, #176]	@ (8001674 <bluetooth_Event+0x1e4>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe0c 	bl	80001e0 <strcmp>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d125      	bne.n	800161a <bluetooth_Event+0x18a>
		{
			if(mailOnFlag1)
 80015ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <bluetooth_Event+0x1e8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <bluetooth_Event+0x154>
				sprintf(sendBuf,"[%s]%s@ON\n",pArray[0],pArray[1]);
 80015d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015da:	1d38      	adds	r0, r7, #4
 80015dc:	4927      	ldr	r1, [pc, #156]	@ (800167c <bluetooth_Event+0x1ec>)
 80015de:	f003 fed1 	bl	8005384 <siprintf>
 80015e2:	e01a      	b.n	800161a <bluetooth_Event+0x18a>
			else if(!mailOnFlag1)
 80015e4:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <bluetooth_Event+0x1e8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d116      	bne.n	800161a <bluetooth_Event+0x18a>
				sprintf(sendBuf,"[%s]%s@EMPTY\n",pArray[0],pArray[1]);
 80015ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015f0:	1d38      	adds	r0, r7, #4
 80015f2:	4923      	ldr	r1, [pc, #140]	@ (8001680 <bluetooth_Event+0x1f0>)
 80015f4:	f003 fec6 	bl	8005384 <siprintf>
 80015f8:	e00f      	b.n	800161a <bluetooth_Event+0x18a>
		}

	}
	else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 80015fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015fc:	4921      	ldr	r1, [pc, #132]	@ (8001684 <bluetooth_Event+0x1f4>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fdee 	bl	80001e0 <strcmp>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d019      	beq.n	800163e <bluetooth_Event+0x1ae>
	{
		return;
	}
	else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 800160a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800160c:	491e      	ldr	r1, [pc, #120]	@ (8001688 <bluetooth_Event+0x1f8>)
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fde6 	bl	80001e0 <strcmp>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
	{
		return;
	}
	else
		return;
 8001618:	e012      	b.n	8001640 <bluetooth_Event+0x1b0>

	//sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
	HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fde9 	bl	80001f4 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	b29a      	uxth	r2, r3
 8001626:	1d39      	adds	r1, r7, #4
 8001628:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800162c:	4817      	ldr	r0, [pc, #92]	@ (800168c <bluetooth_Event+0x1fc>)
 800162e:	f002 fd71 	bl	8004114 <HAL_UART_Transmit>
	printf("Debug send : %s\r\n",sendBuf);
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4816      	ldr	r0, [pc, #88]	@ (8001690 <bluetooth_Event+0x200>)
 8001638:	f003 fe34 	bl	80052a4 <iprintf>
 800163c:	e000      	b.n	8001640 <bluetooth_Event+0x1b0>
		return;
 800163e:	bf00      	nop
}
 8001640:	3788      	adds	r7, #136	@ 0x88
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001dc 	.word	0x200001dc
 800164c:	08006698 	.word	0x08006698
 8001650:	080066a8 	.word	0x080066a8
 8001654:	080066ac 	.word	0x080066ac
 8001658:	080066b0 	.word	0x080066b0
 800165c:	080066b4 	.word	0x080066b4
 8001660:	080066b8 	.word	0x080066b8
 8001664:	080066c4 	.word	0x080066c4
 8001668:	080066cc 	.word	0x080066cc
 800166c:	20000260 	.word	0x20000260
 8001670:	080066d4 	.word	0x080066d4
 8001674:	080066e8 	.word	0x080066e8
 8001678:	20000264 	.word	0x20000264
 800167c:	080066f0 	.word	0x080066f0
 8001680:	080066fc 	.word	0x080066fc
 8001684:	0800670c 	.word	0x0800670c
 8001688:	08006718 	.word	0x08006718
 800168c:	2000015c 	.word	0x2000015c
 8001690:	08006670 	.word	0x08006670

08001694 <delay>:

void delay (uint16_t time)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <delay+0x30>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < time);
 80016a6:	bf00      	nop
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <delay+0x30>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d3f9      	bcc.n	80016a8 <delay+0x14>
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200000cc 	.word	0x200000cc

080016c8 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7f1b      	ldrb	r3, [r3, #28]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	f040 80b8 	bne.w	800184a <HAL_TIM_IC_CaptureCallback+0x182>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80016da:	4b61      	ldr	r3, [pc, #388]	@ (8001860 <HAL_TIM_IC_CaptureCallback+0x198>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d11a      	bne.n	8001718 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80016e2:	2100      	movs	r1, #0
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f002 f977 	bl	80039d8 <HAL_TIM_ReadCapturedValue>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001864 <HAL_TIM_IC_CaptureCallback+0x19c>)
 80016ee:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80016f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001860 <HAL_TIM_IC_CaptureCallback+0x198>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6a1a      	ldr	r2, [r3, #32]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 020a 	bic.w	r2, r2, #10
 8001704:	621a      	str	r2, [r3, #32]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0202 	orr.w	r2, r2, #2
 8001714:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 8001716:	e098      	b.n	800184a <HAL_TIM_IC_CaptureCallback+0x182>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001718:	4b51      	ldr	r3, [pc, #324]	@ (8001860 <HAL_TIM_IC_CaptureCallback+0x198>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	f040 8094 	bne.w	800184a <HAL_TIM_IC_CaptureCallback+0x182>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f002 f957 	bl	80039d8 <HAL_TIM_ReadCapturedValue>
 800172a:	4603      	mov	r3, r0
 800172c:	4a4e      	ldr	r2, [pc, #312]	@ (8001868 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 800172e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 8001738:	4b4b      	ldr	r3, [pc, #300]	@ (8001868 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b49      	ldr	r3, [pc, #292]	@ (8001864 <HAL_TIM_IC_CaptureCallback+0x19c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d907      	bls.n	8001754 <HAL_TIM_IC_CaptureCallback+0x8c>
				Difference = IC_Val2-IC_Val1;
 8001744:	4b48      	ldr	r3, [pc, #288]	@ (8001868 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b46      	ldr	r3, [pc, #280]	@ (8001864 <HAL_TIM_IC_CaptureCallback+0x19c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	4a47      	ldr	r2, [pc, #284]	@ (800186c <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00f      	b.n	8001774 <HAL_TIM_IC_CaptureCallback+0xac>
			else if (IC_Val1 > IC_Val2)
 8001754:	4b43      	ldr	r3, [pc, #268]	@ (8001864 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b43      	ldr	r3, [pc, #268]	@ (8001868 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d909      	bls.n	8001774 <HAL_TIM_IC_CaptureCallback+0xac>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001760:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b3f      	ldr	r3, [pc, #252]	@ (8001864 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800176e:	33ff      	adds	r3, #255	@ 0xff
 8001770:	4a3e      	ldr	r2, [pc, #248]	@ (800186c <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8001772:	6013      	str	r3, [r2, #0]
			HCSR04_Read();
 8001774:	f000 f88a 	bl	800188c <HCSR04_Read>
			total = total - readings[idx];
 8001778:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b3d      	ldr	r3, [pc, #244]	@ (8001874 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	493d      	ldr	r1, [pc, #244]	@ (8001878 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001782:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	4a39      	ldr	r2, [pc, #228]	@ (8001870 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 800178a:	6013      	str	r3, [r2, #0]
			readings[idx] = Difference;
 800178c:	4b37      	ldr	r3, [pc, #220]	@ (800186c <HAL_TIM_IC_CaptureCallback+0x1a4>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4611      	mov	r1, r2
 8001796:	4a38      	ldr	r2, [pc, #224]	@ (8001878 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			total = total + readings[idx];
 800179c:	4b35      	ldr	r3, [pc, #212]	@ (8001874 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a35      	ldr	r2, [pc, #212]	@ (8001878 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 80017a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017a6:	4b32      	ldr	r3, [pc, #200]	@ (8001870 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a30      	ldr	r2, [pc, #192]	@ (8001870 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 80017ae:	6013      	str	r3, [r2, #0]
			idx = idx + 1;
 80017b0:	4b30      	ldr	r3, [pc, #192]	@ (8001874 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001874 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 80017b8:	6013      	str	r3, [r2, #0]
			if (idx >= ARRAYNUM)
 80017ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001874 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b09      	cmp	r3, #9
 80017c0:	dd02      	ble.n	80017c8 <HAL_TIM_IC_CaptureCallback+0x100>
				idx = 0;
 80017c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001874 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
			average = total / ARRAYNUM;
 80017c8:	4b29      	ldr	r3, [pc, #164]	@ (8001870 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2b      	ldr	r2, [pc, #172]	@ (800187c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80017ce:	fb82 1203 	smull	r1, r2, r2, r3
 80017d2:	1092      	asrs	r2, r2, #2
 80017d4:	17db      	asrs	r3, r3, #31
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	4a29      	ldr	r2, [pc, #164]	@ (8001880 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 80017da:	6013      	str	r3, [r2, #0]
			Distance = average * .034/2;
 80017dc:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe feb7 	bl	8000554 <__aeabi_i2d>
 80017e6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001858 <HAL_TIM_IC_CaptureCallback+0x190>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe ff1c 	bl	8000628 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001800:	f7ff f83c 	bl	800087c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f7ff f91e 	bl	8000a4c <__aeabi_d2uiz>
 8001810:	4603      	mov	r3, r0
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001816:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_TIM_IC_CaptureCallback+0x198>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a1a      	ldr	r2, [r3, #32]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 020a 	bic.w	r2, r2, #10
 800182c:	621a      	str	r2, [r3, #32]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a12      	ldr	r2, [r2, #32]
 8001838:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0202 	bic.w	r2, r2, #2
 8001848:	60da      	str	r2, [r3, #12]
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	f3af 8000 	nop.w
 8001858:	b020c49c 	.word	0xb020c49c
 800185c:	3fa16872 	.word	0x3fa16872
 8001860:	2000021c 	.word	0x2000021c
 8001864:	20000210 	.word	0x20000210
 8001868:	20000214 	.word	0x20000214
 800186c:	20000218 	.word	0x20000218
 8001870:	2000024c 	.word	0x2000024c
 8001874:	20000248 	.word	0x20000248
 8001878:	20000220 	.word	0x20000220
 800187c:	66666667 	.word	0x66666667
 8001880:	20000250 	.word	0x20000250
 8001884:	2000021d 	.word	0x2000021d
 8001888:	200000cc 	.word	0x200000cc

0800188c <HCSR04_Read>:

void HCSR04_Read (void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001896:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <HCSR04_Read+0x38>)
 8001898:	f000 ff40 	bl	800271c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 800189c:	200a      	movs	r0, #10
 800189e:	f7ff fef9 	bl	8001694 <delay>
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018a8:	4806      	ldr	r0, [pc, #24]	@ (80018c4 <HCSR04_Read+0x38>)
 80018aa:	f000 ff37 	bl	800271c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HCSR04_Read+0x3c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <HCSR04_Read+0x3c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0202 	orr.w	r2, r2, #2
 80018bc:	60da      	str	r2, [r3, #12]
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40020000 	.word	0x40020000
 80018c8:	200000cc 	.word	0x200000cc

080018cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	2b40      	cmp	r3, #64	@ 0x40
 80018da:	d103      	bne.n	80018e4 <HAL_GPIO_EXTI_Callback+0x18>
	{
	case SCAN_BTN1_Pin:
		BTN1 = 1;
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <HAL_GPIO_EXTI_Callback+0x40>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
		break;
 80018e2:	e00c      	b.n	80018fe <HAL_GPIO_EXTI_Callback+0x32>
	case SCAN_BTN4_Pin:
		BTN4 = 4;
		break;
#endif
	default:
		BTN1 = 0;
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_GPIO_EXTI_Callback+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
		BTN2 = 0;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x44>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
		BTN3 = 0;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <HAL_GPIO_EXTI_Callback+0x48>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
		BTN4 = 0;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <HAL_GPIO_EXTI_Callback+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
		break;
 80018fc:	bf00      	nop
	}
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000268 	.word	0x20000268
 8001910:	2000026c 	.word	0x2000026c
 8001914:	20000270 	.word	0x20000270
 8001918:	20000274 	.word	0x20000274

0800191c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	tim2Sec++;
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	4a0f      	ldr	r2, [pc, #60]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800192c:	6013      	str	r3, [r2, #0]

	if(tim2Sec > 59)
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b3b      	cmp	r3, #59	@ 0x3b
 8001934:	d907      	bls.n	8001946 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		tim2Sec = 0;
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
		tim2Min++;
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001944:	6013      	str	r3, [r2, #0]
	}
	if(tim2Min > 10)
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b0a      	cmp	r3, #10
 800194c:	d902      	bls.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		tim2Min = 0;
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(RUN_LED_GPIO_Port, RUN_LED_Pin);
 8001954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001958:	4805      	ldr	r0, [pc, #20]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800195a:	f000 fef8 	bl	800274e <HAL_GPIO_TogglePin>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000254 	.word	0x20000254
 800196c:	20000258 	.word	0x20000258
 8001970:	40020000 	.word	0x40020000

08001974 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2e      	ldr	r2, [pc, #184]	@ (8001a3c <HAL_UART_RxCpltCallback+0xc8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d128      	bne.n	80019d8 <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 8001986:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <HAL_UART_RxCpltCallback+0xcc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a2e      	ldr	r2, [pc, #184]	@ (8001a44 <HAL_UART_RxCpltCallback+0xd0>)
 800198c:	7811      	ldrb	r1, [r2, #0]
 800198e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a48 <HAL_UART_RxCpltCallback+0xd4>)
 8001990:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8001992:	4b2b      	ldr	r3, [pc, #172]	@ (8001a40 <HAL_UART_RxCpltCallback+0xcc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2c      	ldr	r2, [pc, #176]	@ (8001a48 <HAL_UART_RxCpltCallback+0xd4>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b0d      	cmp	r3, #13
 800199e:	d005      	beq.n	80019ac <HAL_UART_RxCpltCallback+0x38>
 80019a0:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <HAL_UART_RxCpltCallback+0xcc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a29      	ldr	r2, [pc, #164]	@ (8001a4c <HAL_UART_RxCpltCallback+0xd8>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	2b0a      	cmp	r3, #10
 80019aa:	d10b      	bne.n	80019c4 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 80019ac:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <HAL_UART_RxCpltCallback+0xcc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a25      	ldr	r2, [pc, #148]	@ (8001a48 <HAL_UART_RxCpltCallback+0xd4>)
 80019b2:	2100      	movs	r1, #0
 80019b4:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80019b6:	4b26      	ldr	r3, [pc, #152]	@ (8001a50 <HAL_UART_RxCpltCallback+0xdc>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80019bc:	4b20      	ldr	r3, [pc, #128]	@ (8001a40 <HAL_UART_RxCpltCallback+0xcc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e004      	b.n	80019ce <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <HAL_UART_RxCpltCallback+0xcc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001a40 <HAL_UART_RxCpltCallback+0xcc>)
 80019cc:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 80019ce:	2201      	movs	r2, #1
 80019d0:	491c      	ldr	r1, [pc, #112]	@ (8001a44 <HAL_UART_RxCpltCallback+0xd0>)
 80019d2:	4820      	ldr	r0, [pc, #128]	@ (8001a54 <HAL_UART_RxCpltCallback+0xe0>)
 80019d4:	f002 fc29 	bl	800422a <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a58 <HAL_UART_RxCpltCallback+0xe4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d127      	bne.n	8001a32 <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <HAL_UART_RxCpltCallback+0xe8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a60 <HAL_UART_RxCpltCallback+0xec>)
 80019e8:	7811      	ldrb	r1, [r2, #0]
 80019ea:	4a18      	ldr	r2, [pc, #96]	@ (8001a4c <HAL_UART_RxCpltCallback+0xd8>)
 80019ec:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 80019ee:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_UART_RxCpltCallback+0xe8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a16      	ldr	r2, [pc, #88]	@ (8001a4c <HAL_UART_RxCpltCallback+0xd8>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	2b0a      	cmp	r3, #10
 80019f8:	d005      	beq.n	8001a06 <HAL_UART_RxCpltCallback+0x92>
 80019fa:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <HAL_UART_RxCpltCallback+0xe8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a13      	ldr	r2, [pc, #76]	@ (8001a4c <HAL_UART_RxCpltCallback+0xd8>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	2b0d      	cmp	r3, #13
 8001a04:	d10b      	bne.n	8001a1e <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_UART_RxCpltCallback+0xe8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a10      	ldr	r2, [pc, #64]	@ (8001a4c <HAL_UART_RxCpltCallback+0xd8>)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <HAL_UART_RxCpltCallback+0xf0>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_UART_RxCpltCallback+0xe8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e004      	b.n	8001a28 <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_UART_RxCpltCallback+0xe8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <HAL_UART_RxCpltCallback+0xe8>)
 8001a26:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	490d      	ldr	r1, [pc, #52]	@ (8001a60 <HAL_UART_RxCpltCallback+0xec>)
 8001a2c:	480e      	ldr	r0, [pc, #56]	@ (8001a68 <HAL_UART_RxCpltCallback+0xf4>)
 8001a2e:	f002 fbfc 	bl	800422a <HAL_UART_Receive_IT>
    }
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40004400 	.word	0x40004400
 8001a40:	20000278 	.word	0x20000278
 8001a44:	200001a4 	.word	0x200001a4
 8001a48:	200001a8 	.word	0x200001a8
 8001a4c:	200001dc 	.word	0x200001dc
 8001a50:	200001a5 	.word	0x200001a5
 8001a54:	20000114 	.word	0x20000114
 8001a58:	40011400 	.word	0x40011400
 8001a5c:	2000027c 	.word	0x2000027c
 8001a60:	200001db 	.word	0x200001db
 8001a64:	200001da 	.word	0x200001da
 8001a68:	2000015c 	.word	0x2000015c

08001a6c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001a74:	1d39      	adds	r1, r7, #4
 8001a76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4803      	ldr	r0, [pc, #12]	@ (8001a8c <__io_putchar+0x20>)
 8001a7e:	f002 fb49 	bl	8004114 <HAL_UART_Transmit>

  return ch;
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000114 	.word	0x20000114

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a94:	b672      	cpsid	i
}
 8001a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <Error_Handler+0x8>

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ada:	2007      	movs	r0, #7
 8001adc:	f000 fbc6 	bl	800226c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800

08001aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	@ 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b0c:	d116      	bne.n	8001b3c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b29      	ldr	r3, [pc, #164]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a28      	ldr	r2, [pc, #160]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	201c      	movs	r0, #28
 8001b30:	f000 fba7 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b34:	201c      	movs	r0, #28
 8001b36:	f000 fbc0 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b3a:	e038      	b.n	8001bae <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <HAL_TIM_Base_MspInit+0xd0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d133      	bne.n	8001bae <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a13      	ldr	r2, [pc, #76]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b7e:	2340      	movs	r3, #64	@ 0x40
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4809      	ldr	r0, [pc, #36]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b9a:	f000 fc3b 	bl	8002414 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	201d      	movs	r0, #29
 8001ba4:	f000 fb6d 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ba8:	201d      	movs	r0, #29
 8001baa:	f000 fb86 	bl	80022ba <HAL_NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	@ 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40000400 	.word	0x40000400
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	@ 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a3a      	ldr	r2, [pc, #232]	@ (8001ccc <HAL_UART_MspInit+0x108>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d134      	bne.n	8001c50 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	4b39      	ldr	r3, [pc, #228]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	4a38      	ldr	r2, [pc, #224]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf6:	4b36      	ldr	r3, [pc, #216]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a31      	ldr	r2, [pc, #196]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c1e:	230c      	movs	r3, #12
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c2e:	2307      	movs	r3, #7
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	4826      	ldr	r0, [pc, #152]	@ (8001cd4 <HAL_UART_MspInit+0x110>)
 8001c3a:	f000 fbeb 	bl	8002414 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	2026      	movs	r0, #38	@ 0x26
 8001c44:	f000 fb1d 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c48:	2026      	movs	r0, #38	@ 0x26
 8001c4a:	f000 fb36 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c4e:	e038      	b.n	8001cc2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a20      	ldr	r2, [pc, #128]	@ (8001cd8 <HAL_UART_MspInit+0x114>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d133      	bne.n	8001cc2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001c64:	f043 0320 	orr.w	r3, r3, #32
 8001c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6a:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <HAL_UART_MspInit+0x10c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c92:	23c0      	movs	r3, #192	@ 0xc0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	480b      	ldr	r0, [pc, #44]	@ (8001cdc <HAL_UART_MspInit+0x118>)
 8001cae:	f000 fbb1 	bl	8002414 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2047      	movs	r0, #71	@ 0x47
 8001cb8:	f000 fae3 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001cbc:	2047      	movs	r0, #71	@ 0x47
 8001cbe:	f000 fafc 	bl	80022ba <HAL_NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3730      	adds	r7, #48	@ 0x30
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40004400 	.word	0x40004400
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40011400 	.word	0x40011400
 8001cdc:	40020800 	.word	0x40020800

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <NMI_Handler+0x4>

08001ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d36:	f000 f985 	bl	8002044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SCAN_BTN1_Pin);
 8001d42:	2040      	movs	r0, #64	@ 0x40
 8001d44:	f000 fd1e 	bl	8002784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <TIM2_IRQHandler+0x10>)
 8001d52:	f001 fbed 	bl	8003530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000084 	.word	0x20000084

08001d60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <TIM3_IRQHandler+0x10>)
 8001d66:	f001 fbe3 	bl	8003530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200000cc 	.word	0x200000cc

08001d74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <USART2_IRQHandler+0x10>)
 8001d7a:	f002 fa7b 	bl	8004274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000114 	.word	0x20000114

08001d88 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <USART6_IRQHandler+0x10>)
 8001d8e:	f002 fa71 	bl	8004274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000015c 	.word	0x2000015c

08001d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return 1;
 8001da0:	2301      	movs	r3, #1
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_kill>:

int _kill(int pid, int sig)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001db6:	f003 fc87 	bl	80056c8 <__errno>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2216      	movs	r2, #22
 8001dbe:	601a      	str	r2, [r3, #0]
  return -1;
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_exit>:

void _exit (int status)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ffe7 	bl	8001dac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dde:	bf00      	nop
 8001de0:	e7fd      	b.n	8001dde <_exit+0x12>

08001de2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e00a      	b.n	8001e0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df4:	f3af 8000 	nop.w
 8001df8:	4601      	mov	r1, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	60ba      	str	r2, [r7, #8]
 8001e00:	b2ca      	uxtb	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	dbf0      	blt.n	8001df4 <_read+0x12>
  }

  return len;
 8001e12:	687b      	ldr	r3, [r7, #4]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e009      	b.n	8001e42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	60ba      	str	r2, [r7, #8]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fe18 	bl	8001a6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dbf1      	blt.n	8001e2e <_write+0x12>
  }
  return len;
 8001e4a:	687b      	ldr	r3, [r7, #4]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_close>:

int _close(int file)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e7c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <_isatty>:

int _isatty(int file)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec4:	4a14      	ldr	r2, [pc, #80]	@ (8001f18 <_sbrk+0x5c>)
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <_sbrk+0x60>)
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <_sbrk+0x64>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <_sbrk+0x68>)
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d207      	bcs.n	8001efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eec:	f003 fbec 	bl	80056c8 <__errno>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e009      	b.n	8001f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	4a05      	ldr	r2, [pc, #20]	@ (8001f20 <_sbrk+0x64>)
 8001f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20020000 	.word	0x20020000
 8001f1c:	00000400 	.word	0x00000400
 8001f20:	20000280 	.word	0x20000280
 8001f24:	200003d8 	.word	0x200003d8

08001f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <SystemInit+0x20>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f32:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <SystemInit+0x20>)
 8001f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f50:	f7ff ffea 	bl	8001f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f56:	490d      	ldr	r1, [pc, #52]	@ (8001f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f003 fbab 	bl	80056d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7e:	f7fe fefd 	bl	8000d7c <main>
  bx  lr    
 8001f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f90:	08006830 	.word	0x08006830
  ldr r2, =_sbss
 8001f94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f98:	200003d4 	.word	0x200003d4

08001f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <HAL_Init+0x40>)
 8001faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <HAL_Init+0x40>)
 8001fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	@ (8001fe0 <HAL_Init+0x40>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f000 f94f 	bl	800226c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 f808 	bl	8001fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd4:	f7ff fd62 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023c00 	.word	0x40023c00

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_InitTick+0x54>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_InitTick+0x58>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f967 	bl	80022d6 <HAL_SYSTICK_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e00e      	b.n	8002030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d80a      	bhi.n	800202e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002018:	2200      	movs	r2, #0
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f000 f92f 	bl	8002282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002024:	4a06      	ldr	r2, [pc, #24]	@ (8002040 <HAL_InitTick+0x5c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000000 	.word	0x20000000
 800203c:	20000008 	.word	0x20000008
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_IncTick+0x20>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_IncTick+0x24>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <HAL_IncTick+0x24>)
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000008 	.word	0x20000008
 8002068:	20000284 	.word	0x20000284

0800206c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return uwTick;
 8002070:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <HAL_GetTick+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000284 	.word	0x20000284

08002084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800208c:	f7ff ffee 	bl	800206c <HAL_GetTick>
 8002090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d005      	beq.n	80020aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_Delay+0x44>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020aa:	bf00      	nop
 80020ac:	f7ff ffde 	bl	800206c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d8f7      	bhi.n	80020ac <HAL_Delay+0x28>
  {
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000008 	.word	0x20000008

080020cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <__NVIC_GetPriorityGrouping+0x18>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f003 0307 	and.w	r3, r3, #7
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	db0b      	blt.n	800215a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	f003 021f 	and.w	r2, r3, #31
 8002148:	4907      	ldr	r1, [pc, #28]	@ (8002168 <__NVIC_EnableIRQ+0x38>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	2001      	movs	r0, #1
 8002152:	fa00 f202 	lsl.w	r2, r0, r2
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100

0800216c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	2b00      	cmp	r3, #0
 800217e:	db0a      	blt.n	8002196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	490c      	ldr	r1, [pc, #48]	@ (80021b8 <__NVIC_SetPriority+0x4c>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	440b      	add	r3, r1
 8002190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002194:	e00a      	b.n	80021ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4908      	ldr	r1, [pc, #32]	@ (80021bc <__NVIC_SetPriority+0x50>)
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	3b04      	subs	r3, #4
 80021a4:	0112      	lsls	r2, r2, #4
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	440b      	add	r3, r1
 80021aa:	761a      	strb	r2, [r3, #24]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f1c3 0307 	rsb	r3, r3, #7
 80021da:	2b04      	cmp	r3, #4
 80021dc:	bf28      	it	cs
 80021de:	2304      	movcs	r3, #4
 80021e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d902      	bls.n	80021f0 <NVIC_EncodePriority+0x30>
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3b03      	subs	r3, #3
 80021ee:	e000      	b.n	80021f2 <NVIC_EncodePriority+0x32>
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	f04f 32ff 	mov.w	r2, #4294967295
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	401a      	ands	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	43d9      	mvns	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	4313      	orrs	r3, r2
         );
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	@ 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002238:	d301      	bcc.n	800223e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223a:	2301      	movs	r3, #1
 800223c:	e00f      	b.n	800225e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223e:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <SysTick_Config+0x40>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002246:	210f      	movs	r1, #15
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f7ff ff8e 	bl	800216c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <SysTick_Config+0x40>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002256:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <SysTick_Config+0x40>)
 8002258:	2207      	movs	r2, #7
 800225a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000e010 	.word	0xe000e010

0800226c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ff29 	bl	80020cc <__NVIC_SetPriorityGrouping>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002294:	f7ff ff3e 	bl	8002114 <__NVIC_GetPriorityGrouping>
 8002298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	f7ff ff8e 	bl	80021c0 <NVIC_EncodePriority>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff5d 	bl	800216c <__NVIC_SetPriority>
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff31 	bl	8002130 <__NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffa2 	bl	8002228 <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff feb6 	bl	800206c <HAL_GetTick>
 8002300:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d008      	beq.n	8002320 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e052      	b.n	80023c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0216 	bic.w	r2, r2, #22
 800232e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800233e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d103      	bne.n	8002350 <HAL_DMA_Abort+0x62>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0208 	bic.w	r2, r2, #8
 800235e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002370:	e013      	b.n	800239a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002372:	f7ff fe7b 	bl	800206c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b05      	cmp	r3, #5
 800237e:	d90c      	bls.n	800239a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2203      	movs	r2, #3
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e015      	b.n	80023c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e4      	bne.n	8002372 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ac:	223f      	movs	r2, #63	@ 0x3f
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d004      	beq.n	80023ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2280      	movs	r2, #128	@ 0x80
 80023e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e00c      	b.n	8002406 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2205      	movs	r2, #5
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	@ 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e159      	b.n	80026e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8148 	bne.w	80026de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	2b02      	cmp	r3, #2
 8002464:	d130      	bne.n	80024c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d017      	beq.n	8002504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a2 	beq.w	80026de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b57      	ldr	r3, [pc, #348]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	4a56      	ldr	r2, [pc, #344]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025aa:	4b54      	ldr	r3, [pc, #336]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_GPIO_Init+0x2ec>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a49      	ldr	r2, [pc, #292]	@ (8002704 <HAL_GPIO_Init+0x2f0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x202>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a48      	ldr	r2, [pc, #288]	@ (8002708 <HAL_GPIO_Init+0x2f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x1fe>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a47      	ldr	r2, [pc, #284]	@ (800270c <HAL_GPIO_Init+0x2f8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x1fa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a46      	ldr	r2, [pc, #280]	@ (8002710 <HAL_GPIO_Init+0x2fc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x1f6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a45      	ldr	r2, [pc, #276]	@ (8002714 <HAL_GPIO_Init+0x300>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x1f2>
 8002602:	2304      	movs	r3, #4
 8002604:	e008      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002606:	2307      	movs	r3, #7
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260a:	2303      	movs	r3, #3
 800260c:	e004      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260e:	2302      	movs	r3, #2
 8002610:	e002      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002616:	2300      	movs	r3, #0
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f002 0203 	and.w	r2, r2, #3
 800261e:	0092      	lsls	r2, r2, #2
 8002620:	4093      	lsls	r3, r2
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002628:	4935      	ldr	r1, [pc, #212]	@ (8002700 <HAL_GPIO_Init+0x2ec>)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3302      	adds	r3, #2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002636:	4b38      	ldr	r3, [pc, #224]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265a:	4a2f      	ldr	r2, [pc, #188]	@ (8002718 <HAL_GPIO_Init+0x304>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002660:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002684:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_GPIO_Init+0x304>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	f67f aea2 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3724      	adds	r7, #36	@ 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40013800 	.word	0x40013800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400
 800270c:	40020800 	.word	0x40020800
 8002710:	40020c00 	.word	0x40020c00
 8002714:	40021000 	.word	0x40021000
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002738:	e003      	b.n	8002742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002760:	887a      	ldrh	r2, [r7, #2]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4013      	ands	r3, r2
 8002766:	041a      	lsls	r2, r3, #16
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	43d9      	mvns	r1, r3
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	400b      	ands	r3, r1
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	619a      	str	r2, [r3, #24]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800278e:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800279a:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff f892 	bl	80018cc <HAL_GPIO_EXTI_Callback>
  }
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40013c00 	.word	0x40013c00

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e267      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d075      	beq.n	80028be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027d2:	4b88      	ldr	r3, [pc, #544]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d00c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b85      	ldr	r3, [pc, #532]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d112      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	4b82      	ldr	r3, [pc, #520]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027f6:	d10b      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	4b7e      	ldr	r3, [pc, #504]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d05b      	beq.n	80028bc <HAL_RCC_OscConfig+0x108>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d157      	bne.n	80028bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e242      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002818:	d106      	bne.n	8002828 <HAL_RCC_OscConfig+0x74>
 800281a:	4b76      	ldr	r3, [pc, #472]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a75      	ldr	r2, [pc, #468]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e01d      	b.n	8002864 <HAL_RCC_OscConfig+0xb0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x98>
 8002832:	4b70      	ldr	r3, [pc, #448]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6f      	ldr	r2, [pc, #444]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b6d      	ldr	r3, [pc, #436]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6c      	ldr	r2, [pc, #432]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0xb0>
 800284c:	4b69      	ldr	r3, [pc, #420]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a68      	ldr	r2, [pc, #416]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b66      	ldr	r3, [pc, #408]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a65      	ldr	r2, [pc, #404]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff fbfe 	bl	800206c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff fbfa 	bl	800206c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e207      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b5b      	ldr	r3, [pc, #364]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0xc0>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7ff fbea 	bl	800206c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289c:	f7ff fbe6 	bl	800206c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1f3      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	4b51      	ldr	r3, [pc, #324]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0xe8>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ca:	4b4a      	ldr	r3, [pc, #296]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b47      	ldr	r3, [pc, #284]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d11c      	bne.n	800291c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b44      	ldr	r3, [pc, #272]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_RCC_OscConfig+0x152>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1c7      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b3b      	ldr	r3, [pc, #236]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4937      	ldr	r1, [pc, #220]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e03a      	b.n	8002992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b34      	ldr	r3, [pc, #208]	@ (80029f8 <HAL_RCC_OscConfig+0x244>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7ff fb9f 	bl	800206c <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7ff fb9b 	bl	800206c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1a8      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b28      	ldr	r3, [pc, #160]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4925      	ldr	r1, [pc, #148]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002966:	4b24      	ldr	r3, [pc, #144]	@ (80029f8 <HAL_RCC_OscConfig+0x244>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7ff fb7e 	bl	800206c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7ff fb7a 	bl	800206c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e187      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d036      	beq.n	8002a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d016      	beq.n	80029d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <HAL_RCC_OscConfig+0x248>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7ff fb5e 	bl	800206c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b4:	f7ff fb5a 	bl	800206c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e167      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x200>
 80029d2:	e01b      	b.n	8002a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_OscConfig+0x248>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7ff fb47 	bl	800206c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	e00e      	b.n	8002a00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e2:	f7ff fb43 	bl	800206c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d907      	bls.n	8002a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e150      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
 80029f4:	40023800 	.word	0x40023800
 80029f8:	42470000 	.word	0x42470000
 80029fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ea      	bne.n	80029e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8097 	beq.w	8002b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b81      	ldr	r3, [pc, #516]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a7c      	ldr	r2, [pc, #496]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b77      	ldr	r3, [pc, #476]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a56:	4b74      	ldr	r3, [pc, #464]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a73      	ldr	r2, [pc, #460]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7ff fb03 	bl	800206c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7ff faff 	bl	800206c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e10c      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2ea>
 8002a90:	4b64      	ldr	r3, [pc, #400]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a63      	ldr	r2, [pc, #396]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x30c>
 8002aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	4a5e      	ldr	r2, [pc, #376]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
 8002ac0:	4b58      	ldr	r3, [pc, #352]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	4a57      	ldr	r2, [pc, #348]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002acc:	4b55      	ldr	r3, [pc, #340]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a54      	ldr	r2, [pc, #336]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f023 0304 	bic.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d015      	beq.n	8002b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7ff fac4 	bl	800206c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7ff fac0 	bl	800206c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0cb      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afe:	4b49      	ldr	r3, [pc, #292]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ee      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x334>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7ff faae 	bl	800206c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7ff faaa 	bl	800206c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0b5      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ee      	bne.n	8002b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	4a38      	ldr	r2, [pc, #224]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a1 	beq.w	8002c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b52:	4b34      	ldr	r3, [pc, #208]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d05c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d141      	bne.n	8002bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b31      	ldr	r3, [pc, #196]	@ (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fa7e 	bl	800206c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7ff fa7a 	bl	800206c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e087      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	019b      	lsls	r3, r3, #6
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	3b01      	subs	r3, #1
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	491b      	ldr	r1, [pc, #108]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7ff fa53 	bl	800206c <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bca:	f7ff fa4f 	bl	800206c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e05c      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bdc:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x416>
 8002be8:	e054      	b.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7ff fa3c 	bl	800206c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7ff fa38 	bl	800206c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e045      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x444>
 8002c16:	e03d      	b.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e038      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <HAL_RCC_OscConfig+0x4ec>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d121      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d11a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0cc      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b68      	ldr	r3, [pc, #416]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d90c      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b65      	ldr	r3, [pc, #404]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b63      	ldr	r3, [pc, #396]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b8      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf8:	4b59      	ldr	r3, [pc, #356]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a58      	ldr	r2, [pc, #352]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d10:	4b53      	ldr	r3, [pc, #332]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a52      	ldr	r2, [pc, #328]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b50      	ldr	r3, [pc, #320]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	494d      	ldr	r1, [pc, #308]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d044      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b47      	ldr	r3, [pc, #284]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d119      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e07f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b3f      	ldr	r3, [pc, #252]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e06f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e067      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b37      	ldr	r3, [pc, #220]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4934      	ldr	r1, [pc, #208]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d94:	f7ff f96a 	bl	800206c <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7ff f966 	bl	800206c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e04f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b25      	ldr	r3, [pc, #148]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d20c      	bcs.n	8002dec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b22      	ldr	r3, [pc, #136]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b20      	ldr	r3, [pc, #128]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e032      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df8:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4916      	ldr	r1, [pc, #88]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e16:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	490e      	ldr	r1, [pc, #56]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e2a:	f000 f821 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	490a      	ldr	r1, [pc, #40]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	5ccb      	ldrb	r3, [r1, r3]
 8002e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e42:	4a09      	ldr	r2, [pc, #36]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e46:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f8ca 	bl	8001fe4 <HAL_InitTick>

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023c00 	.word	0x40023c00
 8002e60:	40023800 	.word	0x40023800
 8002e64:	08006728 	.word	0x08006728
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	20000004 	.word	0x20000004

08002e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e74:	b094      	sub	sp, #80	@ 0x50
 8002e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e88:	4b79      	ldr	r3, [pc, #484]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d00d      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	f200 80e1 	bhi.w	800305c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ea2:	e0db      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b73      	ldr	r3, [pc, #460]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea8:	e0db      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eaa:	4b73      	ldr	r3, [pc, #460]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eae:	e0d8      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eba:	4b6d      	ldr	r3, [pc, #436]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d063      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	2200      	movs	r2, #0
 8002ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eda:	2300      	movs	r3, #0
 8002edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ede:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	f04f 0000 	mov.w	r0, #0
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	0159      	lsls	r1, r3, #5
 8002ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef4:	0150      	lsls	r0, r2, #5
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4621      	mov	r1, r4
 8002efc:	1a51      	subs	r1, r2, r1
 8002efe:	6139      	str	r1, [r7, #16]
 8002f00:	4629      	mov	r1, r5
 8002f02:	eb63 0301 	sbc.w	r3, r3, r1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f14:	4659      	mov	r1, fp
 8002f16:	018b      	lsls	r3, r1, #6
 8002f18:	4651      	mov	r1, sl
 8002f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f1e:	4651      	mov	r1, sl
 8002f20:	018a      	lsls	r2, r1, #6
 8002f22:	4651      	mov	r1, sl
 8002f24:	ebb2 0801 	subs.w	r8, r2, r1
 8002f28:	4659      	mov	r1, fp
 8002f2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f42:	4690      	mov	r8, r2
 8002f44:	4699      	mov	r9, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	eb18 0303 	adds.w	r3, r8, r3
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	462b      	mov	r3, r5
 8002f50:	eb49 0303 	adc.w	r3, r9, r3
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f62:	4629      	mov	r1, r5
 8002f64:	024b      	lsls	r3, r1, #9
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	024a      	lsls	r2, r1, #9
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f76:	2200      	movs	r2, #0
 8002f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f80:	f7fd fd84 	bl	8000a8c <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f8c:	e058      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b38      	ldr	r3, [pc, #224]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	2200      	movs	r2, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	4611      	mov	r1, r2
 8002f9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fa8:	4642      	mov	r2, r8
 8002faa:	464b      	mov	r3, r9
 8002fac:	f04f 0000 	mov.w	r0, #0
 8002fb0:	f04f 0100 	mov.w	r1, #0
 8002fb4:	0159      	lsls	r1, r3, #5
 8002fb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fba:	0150      	lsls	r0, r2, #5
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fe4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	00eb      	lsls	r3, r5, #3
 8002ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ff6:	00e2      	lsls	r2, r4, #3
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	18e3      	adds	r3, r4, r3
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	464b      	mov	r3, r9
 8003004:	eb45 0303 	adc.w	r3, r5, r3
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003016:	4629      	mov	r1, r5
 8003018:	028b      	lsls	r3, r1, #10
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003020:	4621      	mov	r1, r4
 8003022:	028a      	lsls	r2, r1, #10
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	61fa      	str	r2, [r7, #28]
 8003030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003034:	f7fd fd2a 	bl	8000a8c <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003050:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800305a:	e002      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x204>)
 800305e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003064:	4618      	mov	r0, r3
 8003066:	3750      	adds	r7, #80	@ 0x50
 8003068:	46bd      	mov	sp, r7
 800306a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	00f42400 	.word	0x00f42400
 8003078:	007a1200 	.word	0x007a1200

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003080:	4b03      	ldr	r3, [pc, #12]	@ (8003090 <HAL_RCC_GetHCLKFreq+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000000 	.word	0x20000000

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003098:	f7ff fff0 	bl	800307c <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	@ (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	08006738 	.word	0x08006738

080030bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030c0:	f7ff ffdc 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0b5b      	lsrs	r3, r3, #13
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4903      	ldr	r1, [pc, #12]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	08006738 	.word	0x08006738

080030e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e041      	b.n	800317a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fcee 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 fcba 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d001      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e044      	b.n	8003226 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003234 <HAL_TIM_Base_Start_IT+0xb0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d018      	beq.n	80031f0 <HAL_TIM_Base_Start_IT+0x6c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c6:	d013      	beq.n	80031f0 <HAL_TIM_Base_Start_IT+0x6c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003238 <HAL_TIM_Base_Start_IT+0xb4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00e      	beq.n	80031f0 <HAL_TIM_Base_Start_IT+0x6c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a19      	ldr	r2, [pc, #100]	@ (800323c <HAL_TIM_Base_Start_IT+0xb8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_TIM_Base_Start_IT+0x6c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a17      	ldr	r2, [pc, #92]	@ (8003240 <HAL_TIM_Base_Start_IT+0xbc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <HAL_TIM_Base_Start_IT+0x6c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a16      	ldr	r2, [pc, #88]	@ (8003244 <HAL_TIM_Base_Start_IT+0xc0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d111      	bne.n	8003214 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d010      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003212:	e007      	b.n	8003224 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40010000 	.word	0x40010000
 8003238:	40000400 	.word	0x40000400
 800323c:	40000800 	.word	0x40000800
 8003240:	40000c00 	.word	0x40000c00
 8003244:	40014000 	.word	0x40014000

08003248 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e041      	b.n	80032de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f839 	bl	80032e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f000 fc08 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <HAL_TIM_IC_Start_IT+0x1e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003316:	b2db      	uxtb	r3, r3
 8003318:	e013      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x46>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d104      	bne.n	800332a <HAL_TIM_IC_Start_IT+0x2e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e00b      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x46>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d104      	bne.n	800333a <HAL_TIM_IC_Start_IT+0x3e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e003      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x46>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_TIM_IC_Start_IT+0x58>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e013      	b.n	800337c <HAL_TIM_IC_Start_IT+0x80>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d104      	bne.n	8003364 <HAL_TIM_IC_Start_IT+0x68>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e00b      	b.n	800337c <HAL_TIM_IC_Start_IT+0x80>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d104      	bne.n	8003374 <HAL_TIM_IC_Start_IT+0x78>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e003      	b.n	800337c <HAL_TIM_IC_Start_IT+0x80>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800337a:	b2db      	uxtb	r3, r3
 800337c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800337e:	7bbb      	ldrb	r3, [r7, #14]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d102      	bne.n	800338a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003384:	7b7b      	ldrb	r3, [r7, #13]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d001      	beq.n	800338e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e0c2      	b.n	8003514 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <HAL_TIM_IC_Start_IT+0xa2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800339c:	e013      	b.n	80033c6 <HAL_TIM_IC_Start_IT+0xca>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_IC_Start_IT+0xb2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ac:	e00b      	b.n	80033c6 <HAL_TIM_IC_Start_IT+0xca>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d104      	bne.n	80033be <HAL_TIM_IC_Start_IT+0xc2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033bc:	e003      	b.n	80033c6 <HAL_TIM_IC_Start_IT+0xca>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_IC_Start_IT+0xda>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033d4:	e013      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x102>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_IC_Start_IT+0xea>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033e4:	e00b      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x102>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d104      	bne.n	80033f6 <HAL_TIM_IC_Start_IT+0xfa>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033f4:	e003      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x102>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	d841      	bhi.n	8003488 <HAL_TIM_IC_Start_IT+0x18c>
 8003404:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <HAL_TIM_IC_Start_IT+0x110>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003441 	.word	0x08003441
 8003410:	08003489 	.word	0x08003489
 8003414:	08003489 	.word	0x08003489
 8003418:	08003489 	.word	0x08003489
 800341c:	08003453 	.word	0x08003453
 8003420:	08003489 	.word	0x08003489
 8003424:	08003489 	.word	0x08003489
 8003428:	08003489 	.word	0x08003489
 800342c:	08003465 	.word	0x08003465
 8003430:	08003489 	.word	0x08003489
 8003434:	08003489 	.word	0x08003489
 8003438:	08003489 	.word	0x08003489
 800343c:	08003477 	.word	0x08003477
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0202 	orr.w	r2, r2, #2
 800344e:	60da      	str	r2, [r3, #12]
      break;
 8003450:	e01d      	b.n	800348e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0204 	orr.w	r2, r2, #4
 8003460:	60da      	str	r2, [r3, #12]
      break;
 8003462:	e014      	b.n	800348e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0208 	orr.w	r2, r2, #8
 8003472:	60da      	str	r2, [r3, #12]
      break;
 8003474:	e00b      	b.n	800348e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0210 	orr.w	r2, r2, #16
 8003484:	60da      	str	r2, [r3, #12]
      break;
 8003486:	e002      	b.n	800348e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
      break;
 800348c:	bf00      	nop
  }

  if (status == HAL_OK)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d13e      	bne.n	8003512 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2201      	movs	r2, #1
 800349a:	6839      	ldr	r1, [r7, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fd41 	bl	8003f24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1d      	ldr	r2, [pc, #116]	@ (800351c <HAL_TIM_IC_Start_IT+0x220>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <HAL_TIM_IC_Start_IT+0x1e2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b4:	d013      	beq.n	80034de <HAL_TIM_IC_Start_IT+0x1e2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a19      	ldr	r2, [pc, #100]	@ (8003520 <HAL_TIM_IC_Start_IT+0x224>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_TIM_IC_Start_IT+0x1e2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a17      	ldr	r2, [pc, #92]	@ (8003524 <HAL_TIM_IC_Start_IT+0x228>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_TIM_IC_Start_IT+0x1e2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a16      	ldr	r2, [pc, #88]	@ (8003528 <HAL_TIM_IC_Start_IT+0x22c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_TIM_IC_Start_IT+0x1e2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a14      	ldr	r2, [pc, #80]	@ (800352c <HAL_TIM_IC_Start_IT+0x230>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d111      	bne.n	8003502 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d010      	beq.n	8003512 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003500:	e007      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40010000 	.word	0x40010000
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800
 8003528:	40000c00 	.word	0x40000c00
 800352c:	40014000 	.word	0x40014000

08003530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d020      	beq.n	8003594 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0202 	mvn.w	r2, #2
 8003564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe f8a4 	bl	80016c8 <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa6c 	bl	8003a60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fa73 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0204 	mvn.w	r2, #4
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe f87e 	bl	80016c8 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa46 	bl	8003a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fa4d 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d020      	beq.n	800362c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0208 	mvn.w	r2, #8
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fe f858 	bl	80016c8 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fa20 	bl	8003a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fa27 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	d020      	beq.n	8003678 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01b      	beq.n	8003678 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0210 	mvn.w	r2, #16
 8003648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2208      	movs	r2, #8
 800364e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe f832 	bl	80016c8 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9fa 	bl	8003a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fa01 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0201 	mvn.w	r2, #1
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe f940 	bl	800191c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fcd0 	bl	8004060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9d2 	bl	8003a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0220 	mvn.w	r2, #32
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fca2 	bl	800404c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_TIM_IC_ConfigChannel+0x1e>
 800372a:	2302      	movs	r3, #2
 800372c:	e088      	b.n	8003840 <HAL_TIM_IC_ConfigChannel+0x130>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800374c:	f000 fa32 	bl	8003bb4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 020c 	bic.w	r2, r2, #12
 800375e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6999      	ldr	r1, [r3, #24]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	619a      	str	r2, [r3, #24]
 8003772:	e060      	b.n	8003836 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d11c      	bne.n	80037b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800378a:	f000 faaa 	bl	8003ce2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800379c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6999      	ldr	r1, [r3, #24]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	021a      	lsls	r2, r3, #8
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	619a      	str	r2, [r3, #24]
 80037b2:	e040      	b.n	8003836 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d11b      	bne.n	80037f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037ca:	f000 faf7 	bl	8003dbc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 020c 	bic.w	r2, r2, #12
 80037dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69d9      	ldr	r1, [r3, #28]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	61da      	str	r2, [r3, #28]
 80037f0:	e021      	b.n	8003836 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d11c      	bne.n	8003832 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003808:	f000 fb14 	bl	8003e34 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800381a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69d9      	ldr	r1, [r3, #28]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	021a      	lsls	r2, r3, #8
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	61da      	str	r2, [r3, #28]
 8003830:	e001      	b.n	8003836 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIM_ConfigClockSource+0x1c>
 8003860:	2302      	movs	r3, #2
 8003862:	e0b4      	b.n	80039ce <HAL_TIM_ConfigClockSource+0x186>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800388a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800389c:	d03e      	beq.n	800391c <HAL_TIM_ConfigClockSource+0xd4>
 800389e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a2:	f200 8087 	bhi.w	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038aa:	f000 8086 	beq.w	80039ba <HAL_TIM_ConfigClockSource+0x172>
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b2:	d87f      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b70      	cmp	r3, #112	@ 0x70
 80038b6:	d01a      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0xa6>
 80038b8:	2b70      	cmp	r3, #112	@ 0x70
 80038ba:	d87b      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b60      	cmp	r3, #96	@ 0x60
 80038be:	d050      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x11a>
 80038c0:	2b60      	cmp	r3, #96	@ 0x60
 80038c2:	d877      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b50      	cmp	r3, #80	@ 0x50
 80038c6:	d03c      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0xfa>
 80038c8:	2b50      	cmp	r3, #80	@ 0x50
 80038ca:	d873      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b40      	cmp	r3, #64	@ 0x40
 80038ce:	d058      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x13a>
 80038d0:	2b40      	cmp	r3, #64	@ 0x40
 80038d2:	d86f      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b30      	cmp	r3, #48	@ 0x30
 80038d6:	d064      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038d8:	2b30      	cmp	r3, #48	@ 0x30
 80038da:	d86b      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d060      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d867      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d05c      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d05a      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038ec:	e062      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038fe:	f000 faf1 	bl	8003ee4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	609a      	str	r2, [r3, #8]
      break;
 800391a:	e04f      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800392c:	f000 fada 	bl	8003ee4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800393e:	609a      	str	r2, [r3, #8]
      break;
 8003940:	e03c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	461a      	mov	r2, r3
 8003950:	f000 f998 	bl	8003c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2150      	movs	r1, #80	@ 0x50
 800395a:	4618      	mov	r0, r3
 800395c:	f000 faa7 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003960:	e02c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800396e:	461a      	mov	r2, r3
 8003970:	f000 f9f4 	bl	8003d5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2160      	movs	r1, #96	@ 0x60
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fa97 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003980:	e01c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	461a      	mov	r2, r3
 8003990:	f000 f978 	bl	8003c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2140      	movs	r1, #64	@ 0x40
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fa87 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 80039a0:	e00c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f000 fa7e 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 80039b2:	e003      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      break;
 80039b8:	e000      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	d831      	bhi.n	8003a50 <HAL_TIM_ReadCapturedValue+0x78>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a33 	.word	0x08003a33
 8003a08:	08003a51 	.word	0x08003a51
 8003a0c:	08003a51 	.word	0x08003a51
 8003a10:	08003a51 	.word	0x08003a51
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a51 	.word	0x08003a51
 8003a1c:	08003a51 	.word	0x08003a51
 8003a20:	08003a51 	.word	0x08003a51
 8003a24:	08003a47 	.word	0x08003a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2e:	60fb      	str	r3, [r7, #12]

      break;
 8003a30:	e00f      	b.n	8003a52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	60fb      	str	r3, [r7, #12]

      break;
 8003a3a:	e00a      	b.n	8003a52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a42:	60fb      	str	r3, [r7, #12]

      break;
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	60fb      	str	r3, [r7, #12]

      break;
 8003a4e:	e000      	b.n	8003a52 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a50:	bf00      	nop
  }

  return tmpreg;
 8003a52:	68fb      	ldr	r3, [r7, #12]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3a      	ldr	r2, [pc, #232]	@ (8003b98 <TIM_Base_SetConfig+0xfc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00f      	beq.n	8003ad4 <TIM_Base_SetConfig+0x38>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aba:	d00b      	beq.n	8003ad4 <TIM_Base_SetConfig+0x38>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a37      	ldr	r2, [pc, #220]	@ (8003b9c <TIM_Base_SetConfig+0x100>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <TIM_Base_SetConfig+0x38>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a36      	ldr	r2, [pc, #216]	@ (8003ba0 <TIM_Base_SetConfig+0x104>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_Base_SetConfig+0x38>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a35      	ldr	r2, [pc, #212]	@ (8003ba4 <TIM_Base_SetConfig+0x108>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b98 <TIM_Base_SetConfig+0xfc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01b      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af4:	d017      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a28      	ldr	r2, [pc, #160]	@ (8003b9c <TIM_Base_SetConfig+0x100>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a27      	ldr	r2, [pc, #156]	@ (8003ba0 <TIM_Base_SetConfig+0x104>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00f      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a26      	ldr	r2, [pc, #152]	@ (8003ba4 <TIM_Base_SetConfig+0x108>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00b      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a25      	ldr	r2, [pc, #148]	@ (8003ba8 <TIM_Base_SetConfig+0x10c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a24      	ldr	r2, [pc, #144]	@ (8003bac <TIM_Base_SetConfig+0x110>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d003      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a23      	ldr	r2, [pc, #140]	@ (8003bb0 <TIM_Base_SetConfig+0x114>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d108      	bne.n	8003b38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b98 <TIM_Base_SetConfig+0xfc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d103      	bne.n	8003b6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d105      	bne.n	8003b8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f023 0201 	bic.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	611a      	str	r2, [r3, #16]
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800

08003bb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f023 0201 	bic.w	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a24      	ldr	r2, [pc, #144]	@ (8003c70 <TIM_TI1_SetConfig+0xbc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <TIM_TI1_SetConfig+0x56>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d00f      	beq.n	8003c0a <TIM_TI1_SetConfig+0x56>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a21      	ldr	r2, [pc, #132]	@ (8003c74 <TIM_TI1_SetConfig+0xc0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00b      	beq.n	8003c0a <TIM_TI1_SetConfig+0x56>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a20      	ldr	r2, [pc, #128]	@ (8003c78 <TIM_TI1_SetConfig+0xc4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d007      	beq.n	8003c0a <TIM_TI1_SetConfig+0x56>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c7c <TIM_TI1_SetConfig+0xc8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d003      	beq.n	8003c0a <TIM_TI1_SetConfig+0x56>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a1e      	ldr	r2, [pc, #120]	@ (8003c80 <TIM_TI1_SetConfig+0xcc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <TIM_TI1_SetConfig+0x5a>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <TIM_TI1_SetConfig+0x5c>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0303 	bic.w	r3, r3, #3
 8003c1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	e003      	b.n	8003c2e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f023 030a 	bic.w	r3, r3, #10
 8003c48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f003 030a 	and.w	r3, r3, #10
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40000400 	.word	0x40000400
 8003c78:	40000800 	.word	0x40000800
 8003c7c:	40000c00 	.word	0x40000c00
 8003c80:	40014000 	.word	0x40014000

08003c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0201 	bic.w	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f023 030a 	bic.w	r3, r3, #10
 8003cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b087      	sub	sp, #28
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f023 0210 	bic.w	r2, r3, #16
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	031b      	lsls	r3, r3, #12
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0210 	bic.w	r2, r3, #16
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	031b      	lsls	r3, r3, #12
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f023 0303 	bic.w	r3, r3, #3
 8003de8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003df8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	621a      	str	r2, [r3, #32]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e72:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	031b      	lsls	r3, r3, #12
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003e86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	031b      	lsls	r3, r3, #12
 8003e8c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f043 0307 	orr.w	r3, r3, #7
 8003ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2201      	movs	r2, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1a      	ldr	r2, [r3, #32]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1a      	ldr	r2, [r3, #32]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e050      	b.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d018      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd4:	d013      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a18      	ldr	r2, [pc, #96]	@ (800403c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a16      	ldr	r2, [pc, #88]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a15      	ldr	r2, [pc, #84]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	@ (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10c      	bne.n	8004018 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	4313      	orrs	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	40014000 	.word	0x40014000

0800404c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e042      	b.n	800410c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fd92 	bl	8001bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2224      	movs	r2, #36	@ 0x24
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fdbd 	bl	8004c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	@ 0x28
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b20      	cmp	r3, #32
 8004132:	d175      	bne.n	8004220 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_UART_Transmit+0x2c>
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e06e      	b.n	8004222 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2221      	movs	r2, #33	@ 0x21
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004152:	f7fd ff8b 	bl	800206c <HAL_GetTick>
 8004156:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	88fa      	ldrh	r2, [r7, #6]
 8004162:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800416c:	d108      	bne.n	8004180 <HAL_UART_Transmit+0x6c>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004176:	2300      	movs	r3, #0
 8004178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	e003      	b.n	8004188 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004184:	2300      	movs	r3, #0
 8004186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004188:	e02e      	b.n	80041e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2200      	movs	r2, #0
 8004192:	2180      	movs	r1, #128	@ 0x80
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fb1f 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e03a      	b.n	8004222 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	3302      	adds	r3, #2
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	e007      	b.n	80041da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	3301      	adds	r3, #1
 80041d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1cb      	bne.n	800418a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2200      	movs	r2, #0
 80041fa:	2140      	movs	r1, #64	@ 0x40
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 faeb 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e006      	b.n	8004222 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	4613      	mov	r3, r2
 8004236:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b20      	cmp	r3, #32
 8004242:	d112      	bne.n	800426a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_UART_Receive_IT+0x26>
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e00b      	b.n	800426c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	461a      	mov	r2, r3
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fb12 	bl	800488a <UART_Start_Receive_IT>
 8004266:	4603      	mov	r3, r0
 8004268:	e000      	b.n	800426c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
  }
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b0ba      	sub	sp, #232	@ 0xe8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800429a:	2300      	movs	r3, #0
 800429c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_UART_IRQHandler+0x66>
 80042c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fbf2 	bl	8004abc <UART_Receive_IT>
      return;
 80042d8:	e25b      	b.n	8004792 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80de 	beq.w	80044a0 <HAL_UART_IRQHandler+0x22c>
 80042e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80d1 	beq.w	80044a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_UART_IRQHandler+0xae>
 800430a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800430e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431a:	f043 0201 	orr.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_UART_IRQHandler+0xd2>
 800432e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433e:	f043 0202 	orr.w	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_UART_IRQHandler+0xf6>
 8004352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	f043 0204 	orr.w	r2, r3, #4
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d011      	beq.n	800439a <HAL_UART_IRQHandler+0x126>
 8004376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f043 0208 	orr.w	r2, r3, #8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 81f2 	beq.w	8004788 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_UART_IRQHandler+0x14e>
 80043b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fb7d 	bl	8004abc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043cc:	2b40      	cmp	r3, #64	@ 0x40
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <HAL_UART_IRQHandler+0x17a>
 80043e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d04f      	beq.n	800448e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa85 	bl	80048fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	d141      	bne.n	8004486 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3314      	adds	r3, #20
 8004408:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004418:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800441c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800442e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004432:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800443a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1d9      	bne.n	8004402 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d013      	beq.n	800447e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445a:	4a7e      	ldr	r2, [pc, #504]	@ (8004654 <HAL_UART_IRQHandler+0x3e0>)
 800445c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd ffb3 	bl	80023ce <HAL_DMA_Abort_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004478:	4610      	mov	r0, r2
 800447a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	e00e      	b.n	800449c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f994 	bl	80047ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004484:	e00a      	b.n	800449c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f990 	bl	80047ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448c:	e006      	b.n	800449c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f98c 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800449a:	e175      	b.n	8004788 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	bf00      	nop
    return;
 800449e:	e173      	b.n	8004788 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	f040 814f 	bne.w	8004748 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8148 	beq.w	8004748 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8141 	beq.w	8004748 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e6:	2b40      	cmp	r3, #64	@ 0x40
 80044e8:	f040 80b6 	bne.w	8004658 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8145 	beq.w	800478c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800450a:	429a      	cmp	r2, r3
 800450c:	f080 813e 	bcs.w	800478c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004516:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004522:	f000 8088 	beq.w	8004636 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800453c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004552:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004556:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800455e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800456a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1d9      	bne.n	8004526 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3314      	adds	r3, #20
 8004578:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3314      	adds	r3, #20
 8004592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004596:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800459a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800459e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e1      	bne.n	8004572 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3314      	adds	r3, #20
 80045b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3314      	adds	r3, #20
 80045ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e3      	bne.n	80045ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004606:	f023 0310 	bic.w	r3, r3, #16
 800460a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	330c      	adds	r3, #12
 8004614:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004618:	65ba      	str	r2, [r7, #88]	@ 0x58
 800461a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800461e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e3      	bne.n	80045f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004630:	4618      	mov	r0, r3
 8004632:	f7fd fe5c 	bl	80022ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004644:	b29b      	uxth	r3, r3
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	b29b      	uxth	r3, r3
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f8b7 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004652:	e09b      	b.n	800478c <HAL_UART_IRQHandler+0x518>
 8004654:	080049c5 	.word	0x080049c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004660:	b29b      	uxth	r3, r3
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 808e 	beq.w	8004790 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8089 	beq.w	8004790 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800468e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004690:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004694:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80046a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e3      	bne.n	800467e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	623b      	str	r3, [r7, #32]
   return(result);
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046da:	633a      	str	r2, [r7, #48]	@ 0x30
 80046dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e3      	bne.n	80046b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	60fb      	str	r3, [r7, #12]
   return(result);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0310 	bic.w	r3, r3, #16
 8004712:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004720:	61fa      	str	r2, [r7, #28]
 8004722:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	69b9      	ldr	r1, [r7, #24]
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	617b      	str	r3, [r7, #20]
   return(result);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e3      	bne.n	80046fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800473a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f83d 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004746:	e023      	b.n	8004790 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004750:	2b00      	cmp	r3, #0
 8004752:	d009      	beq.n	8004768 <HAL_UART_IRQHandler+0x4f4>
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f943 	bl	80049ec <UART_Transmit_IT>
    return;
 8004766:	e014      	b.n	8004792 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <HAL_UART_IRQHandler+0x51e>
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f983 	bl	8004a8c <UART_EndTransmit_IT>
    return;
 8004786:	e004      	b.n	8004792 <HAL_UART_IRQHandler+0x51e>
    return;
 8004788:	bf00      	nop
 800478a:	e002      	b.n	8004792 <HAL_UART_IRQHandler+0x51e>
      return;
 800478c:	bf00      	nop
 800478e:	e000      	b.n	8004792 <HAL_UART_IRQHandler+0x51e>
      return;
 8004790:	bf00      	nop
  }
}
 8004792:	37e8      	adds	r7, #232	@ 0xe8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e8:	e03b      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d037      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f2:	f7fd fc3b 	bl	800206c <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <UART_WaitOnFlagUntilTimeout+0x30>
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e03a      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d023      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x8a>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b80      	cmp	r3, #128	@ 0x80
 800481e:	d020      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b40      	cmp	r3, #64	@ 0x40
 8004824:	d01d      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b08      	cmp	r3, #8
 8004832:	d116      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f857 	bl	80048fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2208      	movs	r2, #8
 8004854:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e00f      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d0b4      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	4613      	mov	r3, r2
 8004896:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	88fa      	ldrh	r2, [r7, #6]
 80048a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2222      	movs	r2, #34	@ 0x22
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0220 	orr.w	r2, r2, #32
 80048ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048fe:	b480      	push	{r7}
 8004900:	b095      	sub	sp, #84	@ 0x54
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800491c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004926:	643a      	str	r2, [r7, #64]	@ 0x40
 8004928:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800492c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e5      	bne.n	8004906 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3314      	adds	r3, #20
 8004940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	61fb      	str	r3, [r7, #28]
   return(result);
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800495a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800495c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e5      	bne.n	800493a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	2b01      	cmp	r3, #1
 8004974:	d119      	bne.n	80049aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	60bb      	str	r3, [r7, #8]
   return(result);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f023 0310 	bic.w	r3, r3, #16
 800498c:	647b      	str	r3, [r7, #68]	@ 0x44
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004996:	61ba      	str	r2, [r7, #24]
 8004998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6979      	ldr	r1, [r7, #20]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	613b      	str	r3, [r7, #16]
   return(result);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e5      	bne.n	8004976 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049b8:	bf00      	nop
 80049ba:	3754      	adds	r7, #84	@ 0x54
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff fee4 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b21      	cmp	r3, #33	@ 0x21
 80049fe:	d13e      	bne.n	8004a7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a08:	d114      	bne.n	8004a34 <UART_Transmit_IT+0x48>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d110      	bne.n	8004a34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	1c9a      	adds	r2, r3, #2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	621a      	str	r2, [r3, #32]
 8004a32:	e008      	b.n	8004a46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	1c59      	adds	r1, r3, #1
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6211      	str	r1, [r2, #32]
 8004a3e:	781a      	ldrb	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4619      	mov	r1, r3
 8004a54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e000      	b.n	8004a80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
  }
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aa2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff fe73 	bl	8004798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08c      	sub	sp, #48	@ 0x30
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b22      	cmp	r3, #34	@ 0x22
 8004ace:	f040 80ae 	bne.w	8004c2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ada:	d117      	bne.n	8004b0c <UART_Receive_IT+0x50>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d113      	bne.n	8004b0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	1c9a      	adds	r2, r3, #2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b0a:	e026      	b.n	8004b5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1e:	d007      	beq.n	8004b30 <UART_Receive_IT+0x74>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <UART_Receive_IT+0x82>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e008      	b.n	8004b50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4619      	mov	r1, r3
 8004b68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d15d      	bne.n	8004c2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0220 	bic.w	r2, r2, #32
 8004b7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d135      	bne.n	8004c20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f023 0310 	bic.w	r3, r3, #16
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bda:	623a      	str	r2, [r7, #32]
 8004bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	69f9      	ldr	r1, [r7, #28]
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e5      	bne.n	8004bba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d10a      	bne.n	8004c12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff fdd1 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
 8004c1e:	e002      	b.n	8004c26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fc fea7 	bl	8001974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e002      	b.n	8004c30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e000      	b.n	8004c30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
  }
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3730      	adds	r7, #48	@ 0x30
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c3c:	b0c0      	sub	sp, #256	@ 0x100
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	68d9      	ldr	r1, [r3, #12]
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	ea40 0301 	orr.w	r3, r0, r1
 8004c60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c90:	f021 010c 	bic.w	r1, r1, #12
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb2:	6999      	ldr	r1, [r3, #24]
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	ea40 0301 	orr.w	r3, r0, r1
 8004cbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b8f      	ldr	r3, [pc, #572]	@ (8004f04 <UART_SetConfig+0x2cc>)
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d005      	beq.n	8004cd8 <UART_SetConfig+0xa0>
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b8d      	ldr	r3, [pc, #564]	@ (8004f08 <UART_SetConfig+0x2d0>)
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d104      	bne.n	8004ce2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cd8:	f7fe f9f0 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 8004cdc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ce0:	e003      	b.n	8004cea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ce2:	f7fe f9d7 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8004ce6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf4:	f040 810c 	bne.w	8004f10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	1891      	adds	r1, r2, r2
 8004d10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d12:	415b      	adcs	r3, r3
 8004d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	eb12 0801 	adds.w	r8, r2, r1
 8004d20:	4629      	mov	r1, r5
 8004d22:	eb43 0901 	adc.w	r9, r3, r1
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d3a:	4690      	mov	r8, r2
 8004d3c:	4699      	mov	r9, r3
 8004d3e:	4623      	mov	r3, r4
 8004d40:	eb18 0303 	adds.w	r3, r8, r3
 8004d44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d48:	462b      	mov	r3, r5
 8004d4a:	eb49 0303 	adc.w	r3, r9, r3
 8004d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d66:	460b      	mov	r3, r1
 8004d68:	18db      	adds	r3, r3, r3
 8004d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	eb42 0303 	adc.w	r3, r2, r3
 8004d72:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d7c:	f7fb fe86 	bl	8000a8c <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4b61      	ldr	r3, [pc, #388]	@ (8004f0c <UART_SetConfig+0x2d4>)
 8004d86:	fba3 2302 	umull	r2, r3, r3, r2
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	011c      	lsls	r4, r3, #4
 8004d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	1891      	adds	r1, r2, r2
 8004da6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004da8:	415b      	adcs	r3, r3
 8004daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004db0:	4641      	mov	r1, r8
 8004db2:	eb12 0a01 	adds.w	sl, r2, r1
 8004db6:	4649      	mov	r1, r9
 8004db8:	eb43 0b01 	adc.w	fp, r3, r1
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dd0:	4692      	mov	sl, r2
 8004dd2:	469b      	mov	fp, r3
 8004dd4:	4643      	mov	r3, r8
 8004dd6:	eb1a 0303 	adds.w	r3, sl, r3
 8004dda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dde:	464b      	mov	r3, r9
 8004de0:	eb4b 0303 	adc.w	r3, fp, r3
 8004de4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004df4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004df8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	18db      	adds	r3, r3, r3
 8004e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e02:	4613      	mov	r3, r2
 8004e04:	eb42 0303 	adc.w	r3, r2, r3
 8004e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e12:	f7fb fe3b 	bl	8000a8c <__aeabi_uldivmod>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f0c <UART_SetConfig+0x2d4>)
 8004e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	2264      	movs	r2, #100	@ 0x64
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	1acb      	subs	r3, r1, r3
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e32:	4b36      	ldr	r3, [pc, #216]	@ (8004f0c <UART_SetConfig+0x2d4>)
 8004e34:	fba3 2302 	umull	r2, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e40:	441c      	add	r4, r3
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e64:	4641      	mov	r1, r8
 8004e66:	1851      	adds	r1, r2, r1
 8004e68:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	414b      	adcs	r3, r1
 8004e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	00cb      	lsls	r3, r1, #3
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e86:	4651      	mov	r1, sl
 8004e88:	00ca      	lsls	r2, r1, #3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4642      	mov	r2, r8
 8004e92:	189b      	adds	r3, r3, r2
 8004e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e98:	464b      	mov	r3, r9
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004eb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004eb8:	460b      	mov	r3, r1
 8004eba:	18db      	adds	r3, r3, r3
 8004ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	eb42 0303 	adc.w	r3, r2, r3
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004eca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ece:	f7fb fddd 	bl	8000a8c <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <UART_SetConfig+0x2d4>)
 8004ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	2164      	movs	r1, #100	@ 0x64
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	3332      	adds	r3, #50	@ 0x32
 8004eea:	4a08      	ldr	r2, [pc, #32]	@ (8004f0c <UART_SetConfig+0x2d4>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	f003 0207 	and.w	r2, r3, #7
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4422      	add	r2, r4
 8004efe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f00:	e106      	b.n	8005110 <UART_SetConfig+0x4d8>
 8004f02:	bf00      	nop
 8004f04:	40011000 	.word	0x40011000
 8004f08:	40011400 	.word	0x40011400
 8004f0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f22:	4642      	mov	r2, r8
 8004f24:	464b      	mov	r3, r9
 8004f26:	1891      	adds	r1, r2, r2
 8004f28:	6239      	str	r1, [r7, #32]
 8004f2a:	415b      	adcs	r3, r3
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f32:	4641      	mov	r1, r8
 8004f34:	1854      	adds	r4, r2, r1
 8004f36:	4649      	mov	r1, r9
 8004f38:	eb43 0501 	adc.w	r5, r3, r1
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	00eb      	lsls	r3, r5, #3
 8004f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f4a:	00e2      	lsls	r2, r4, #3
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	461d      	mov	r5, r3
 8004f50:	4643      	mov	r3, r8
 8004f52:	18e3      	adds	r3, r4, r3
 8004f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f58:	464b      	mov	r3, r9
 8004f5a:	eb45 0303 	adc.w	r3, r5, r3
 8004f5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f7e:	4629      	mov	r1, r5
 8004f80:	008b      	lsls	r3, r1, #2
 8004f82:	4621      	mov	r1, r4
 8004f84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f88:	4621      	mov	r1, r4
 8004f8a:	008a      	lsls	r2, r1, #2
 8004f8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f90:	f7fb fd7c 	bl	8000a8c <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4b60      	ldr	r3, [pc, #384]	@ (800511c <UART_SetConfig+0x4e4>)
 8004f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	011c      	lsls	r4, r3, #4
 8004fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	1891      	adds	r1, r2, r2
 8004fba:	61b9      	str	r1, [r7, #24]
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	1851      	adds	r1, r2, r1
 8004fc8:	6139      	str	r1, [r7, #16]
 8004fca:	4649      	mov	r1, r9
 8004fcc:	414b      	adcs	r3, r1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fdc:	4659      	mov	r1, fp
 8004fde:	00cb      	lsls	r3, r1, #3
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	00ca      	lsls	r2, r1, #3
 8004fea:	4610      	mov	r0, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	460a      	mov	r2, r1
 8004ffc:	eb42 0303 	adc.w	r3, r2, r3
 8005000:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800500e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800501c:	4649      	mov	r1, r9
 800501e:	008b      	lsls	r3, r1, #2
 8005020:	4641      	mov	r1, r8
 8005022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005026:	4641      	mov	r1, r8
 8005028:	008a      	lsls	r2, r1, #2
 800502a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800502e:	f7fb fd2d 	bl	8000a8c <__aeabi_uldivmod>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4611      	mov	r1, r2
 8005038:	4b38      	ldr	r3, [pc, #224]	@ (800511c <UART_SetConfig+0x4e4>)
 800503a:	fba3 2301 	umull	r2, r3, r3, r1
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2264      	movs	r2, #100	@ 0x64
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	1acb      	subs	r3, r1, r3
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	3332      	adds	r3, #50	@ 0x32
 800504c:	4a33      	ldr	r2, [pc, #204]	@ (800511c <UART_SetConfig+0x4e4>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005058:	441c      	add	r4, r3
 800505a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800505e:	2200      	movs	r2, #0
 8005060:	673b      	str	r3, [r7, #112]	@ 0x70
 8005062:	677a      	str	r2, [r7, #116]	@ 0x74
 8005064:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005068:	4642      	mov	r2, r8
 800506a:	464b      	mov	r3, r9
 800506c:	1891      	adds	r1, r2, r2
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	415b      	adcs	r3, r3
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005078:	4641      	mov	r1, r8
 800507a:	1851      	adds	r1, r2, r1
 800507c:	6039      	str	r1, [r7, #0]
 800507e:	4649      	mov	r1, r9
 8005080:	414b      	adcs	r3, r1
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005090:	4659      	mov	r1, fp
 8005092:	00cb      	lsls	r3, r1, #3
 8005094:	4651      	mov	r1, sl
 8005096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509a:	4651      	mov	r1, sl
 800509c:	00ca      	lsls	r2, r1, #3
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	4642      	mov	r2, r8
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050aa:	464b      	mov	r3, r9
 80050ac:	460a      	mov	r2, r1
 80050ae:	eb42 0303 	adc.w	r3, r2, r3
 80050b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80050be:	667a      	str	r2, [r7, #100]	@ 0x64
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050cc:	4649      	mov	r1, r9
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	4641      	mov	r1, r8
 80050d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d6:	4641      	mov	r1, r8
 80050d8:	008a      	lsls	r2, r1, #2
 80050da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050de:	f7fb fcd5 	bl	8000a8c <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <UART_SetConfig+0x4e4>)
 80050e8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	2164      	movs	r1, #100	@ 0x64
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	3332      	adds	r3, #50	@ 0x32
 80050fa:	4a08      	ldr	r2, [pc, #32]	@ (800511c <UART_SetConfig+0x4e4>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	f003 020f 	and.w	r2, r3, #15
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4422      	add	r2, r4
 800510e:	609a      	str	r2, [r3, #8]
}
 8005110:	bf00      	nop
 8005112:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005116:	46bd      	mov	sp, r7
 8005118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800511c:	51eb851f 	.word	0x51eb851f

08005120 <std>:
 8005120:	2300      	movs	r3, #0
 8005122:	b510      	push	{r4, lr}
 8005124:	4604      	mov	r4, r0
 8005126:	e9c0 3300 	strd	r3, r3, [r0]
 800512a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800512e:	6083      	str	r3, [r0, #8]
 8005130:	8181      	strh	r1, [r0, #12]
 8005132:	6643      	str	r3, [r0, #100]	@ 0x64
 8005134:	81c2      	strh	r2, [r0, #14]
 8005136:	6183      	str	r3, [r0, #24]
 8005138:	4619      	mov	r1, r3
 800513a:	2208      	movs	r2, #8
 800513c:	305c      	adds	r0, #92	@ 0x5c
 800513e:	f000 fa19 	bl	8005574 <memset>
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <std+0x58>)
 8005144:	6263      	str	r3, [r4, #36]	@ 0x24
 8005146:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <std+0x5c>)
 8005148:	62a3      	str	r3, [r4, #40]	@ 0x28
 800514a:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <std+0x60>)
 800514c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800514e:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <std+0x64>)
 8005150:	6323      	str	r3, [r4, #48]	@ 0x30
 8005152:	4b0d      	ldr	r3, [pc, #52]	@ (8005188 <std+0x68>)
 8005154:	6224      	str	r4, [r4, #32]
 8005156:	429c      	cmp	r4, r3
 8005158:	d006      	beq.n	8005168 <std+0x48>
 800515a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800515e:	4294      	cmp	r4, r2
 8005160:	d002      	beq.n	8005168 <std+0x48>
 8005162:	33d0      	adds	r3, #208	@ 0xd0
 8005164:	429c      	cmp	r4, r3
 8005166:	d105      	bne.n	8005174 <std+0x54>
 8005168:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005170:	f000 bad4 	b.w	800571c <__retarget_lock_init_recursive>
 8005174:	bd10      	pop	{r4, pc}
 8005176:	bf00      	nop
 8005178:	080053c5 	.word	0x080053c5
 800517c:	080053e7 	.word	0x080053e7
 8005180:	0800541f 	.word	0x0800541f
 8005184:	08005443 	.word	0x08005443
 8005188:	20000288 	.word	0x20000288

0800518c <stdio_exit_handler>:
 800518c:	4a02      	ldr	r2, [pc, #8]	@ (8005198 <stdio_exit_handler+0xc>)
 800518e:	4903      	ldr	r1, [pc, #12]	@ (800519c <stdio_exit_handler+0x10>)
 8005190:	4803      	ldr	r0, [pc, #12]	@ (80051a0 <stdio_exit_handler+0x14>)
 8005192:	f000 b869 	b.w	8005268 <_fwalk_sglue>
 8005196:	bf00      	nop
 8005198:	2000000c 	.word	0x2000000c
 800519c:	080062c9 	.word	0x080062c9
 80051a0:	2000001c 	.word	0x2000001c

080051a4 <cleanup_stdio>:
 80051a4:	6841      	ldr	r1, [r0, #4]
 80051a6:	4b0c      	ldr	r3, [pc, #48]	@ (80051d8 <cleanup_stdio+0x34>)
 80051a8:	4299      	cmp	r1, r3
 80051aa:	b510      	push	{r4, lr}
 80051ac:	4604      	mov	r4, r0
 80051ae:	d001      	beq.n	80051b4 <cleanup_stdio+0x10>
 80051b0:	f001 f88a 	bl	80062c8 <_fflush_r>
 80051b4:	68a1      	ldr	r1, [r4, #8]
 80051b6:	4b09      	ldr	r3, [pc, #36]	@ (80051dc <cleanup_stdio+0x38>)
 80051b8:	4299      	cmp	r1, r3
 80051ba:	d002      	beq.n	80051c2 <cleanup_stdio+0x1e>
 80051bc:	4620      	mov	r0, r4
 80051be:	f001 f883 	bl	80062c8 <_fflush_r>
 80051c2:	68e1      	ldr	r1, [r4, #12]
 80051c4:	4b06      	ldr	r3, [pc, #24]	@ (80051e0 <cleanup_stdio+0x3c>)
 80051c6:	4299      	cmp	r1, r3
 80051c8:	d004      	beq.n	80051d4 <cleanup_stdio+0x30>
 80051ca:	4620      	mov	r0, r4
 80051cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d0:	f001 b87a 	b.w	80062c8 <_fflush_r>
 80051d4:	bd10      	pop	{r4, pc}
 80051d6:	bf00      	nop
 80051d8:	20000288 	.word	0x20000288
 80051dc:	200002f0 	.word	0x200002f0
 80051e0:	20000358 	.word	0x20000358

080051e4 <global_stdio_init.part.0>:
 80051e4:	b510      	push	{r4, lr}
 80051e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005214 <global_stdio_init.part.0+0x30>)
 80051e8:	4c0b      	ldr	r4, [pc, #44]	@ (8005218 <global_stdio_init.part.0+0x34>)
 80051ea:	4a0c      	ldr	r2, [pc, #48]	@ (800521c <global_stdio_init.part.0+0x38>)
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	4620      	mov	r0, r4
 80051f0:	2200      	movs	r2, #0
 80051f2:	2104      	movs	r1, #4
 80051f4:	f7ff ff94 	bl	8005120 <std>
 80051f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051fc:	2201      	movs	r2, #1
 80051fe:	2109      	movs	r1, #9
 8005200:	f7ff ff8e 	bl	8005120 <std>
 8005204:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005208:	2202      	movs	r2, #2
 800520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520e:	2112      	movs	r1, #18
 8005210:	f7ff bf86 	b.w	8005120 <std>
 8005214:	200003c0 	.word	0x200003c0
 8005218:	20000288 	.word	0x20000288
 800521c:	0800518d 	.word	0x0800518d

08005220 <__sfp_lock_acquire>:
 8005220:	4801      	ldr	r0, [pc, #4]	@ (8005228 <__sfp_lock_acquire+0x8>)
 8005222:	f000 ba7c 	b.w	800571e <__retarget_lock_acquire_recursive>
 8005226:	bf00      	nop
 8005228:	200003c9 	.word	0x200003c9

0800522c <__sfp_lock_release>:
 800522c:	4801      	ldr	r0, [pc, #4]	@ (8005234 <__sfp_lock_release+0x8>)
 800522e:	f000 ba77 	b.w	8005720 <__retarget_lock_release_recursive>
 8005232:	bf00      	nop
 8005234:	200003c9 	.word	0x200003c9

08005238 <__sinit>:
 8005238:	b510      	push	{r4, lr}
 800523a:	4604      	mov	r4, r0
 800523c:	f7ff fff0 	bl	8005220 <__sfp_lock_acquire>
 8005240:	6a23      	ldr	r3, [r4, #32]
 8005242:	b11b      	cbz	r3, 800524c <__sinit+0x14>
 8005244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005248:	f7ff bff0 	b.w	800522c <__sfp_lock_release>
 800524c:	4b04      	ldr	r3, [pc, #16]	@ (8005260 <__sinit+0x28>)
 800524e:	6223      	str	r3, [r4, #32]
 8005250:	4b04      	ldr	r3, [pc, #16]	@ (8005264 <__sinit+0x2c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f5      	bne.n	8005244 <__sinit+0xc>
 8005258:	f7ff ffc4 	bl	80051e4 <global_stdio_init.part.0>
 800525c:	e7f2      	b.n	8005244 <__sinit+0xc>
 800525e:	bf00      	nop
 8005260:	080051a5 	.word	0x080051a5
 8005264:	200003c0 	.word	0x200003c0

08005268 <_fwalk_sglue>:
 8005268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800526c:	4607      	mov	r7, r0
 800526e:	4688      	mov	r8, r1
 8005270:	4614      	mov	r4, r2
 8005272:	2600      	movs	r6, #0
 8005274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005278:	f1b9 0901 	subs.w	r9, r9, #1
 800527c:	d505      	bpl.n	800528a <_fwalk_sglue+0x22>
 800527e:	6824      	ldr	r4, [r4, #0]
 8005280:	2c00      	cmp	r4, #0
 8005282:	d1f7      	bne.n	8005274 <_fwalk_sglue+0xc>
 8005284:	4630      	mov	r0, r6
 8005286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528a:	89ab      	ldrh	r3, [r5, #12]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d907      	bls.n	80052a0 <_fwalk_sglue+0x38>
 8005290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005294:	3301      	adds	r3, #1
 8005296:	d003      	beq.n	80052a0 <_fwalk_sglue+0x38>
 8005298:	4629      	mov	r1, r5
 800529a:	4638      	mov	r0, r7
 800529c:	47c0      	blx	r8
 800529e:	4306      	orrs	r6, r0
 80052a0:	3568      	adds	r5, #104	@ 0x68
 80052a2:	e7e9      	b.n	8005278 <_fwalk_sglue+0x10>

080052a4 <iprintf>:
 80052a4:	b40f      	push	{r0, r1, r2, r3}
 80052a6:	b507      	push	{r0, r1, r2, lr}
 80052a8:	4906      	ldr	r1, [pc, #24]	@ (80052c4 <iprintf+0x20>)
 80052aa:	ab04      	add	r3, sp, #16
 80052ac:	6808      	ldr	r0, [r1, #0]
 80052ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b2:	6881      	ldr	r1, [r0, #8]
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	f000 fcdd 	bl	8005c74 <_vfiprintf_r>
 80052ba:	b003      	add	sp, #12
 80052bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052c0:	b004      	add	sp, #16
 80052c2:	4770      	bx	lr
 80052c4:	20000018 	.word	0x20000018

080052c8 <_puts_r>:
 80052c8:	6a03      	ldr	r3, [r0, #32]
 80052ca:	b570      	push	{r4, r5, r6, lr}
 80052cc:	6884      	ldr	r4, [r0, #8]
 80052ce:	4605      	mov	r5, r0
 80052d0:	460e      	mov	r6, r1
 80052d2:	b90b      	cbnz	r3, 80052d8 <_puts_r+0x10>
 80052d4:	f7ff ffb0 	bl	8005238 <__sinit>
 80052d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052da:	07db      	lsls	r3, r3, #31
 80052dc:	d405      	bmi.n	80052ea <_puts_r+0x22>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	0598      	lsls	r0, r3, #22
 80052e2:	d402      	bmi.n	80052ea <_puts_r+0x22>
 80052e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052e6:	f000 fa1a 	bl	800571e <__retarget_lock_acquire_recursive>
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	0719      	lsls	r1, r3, #28
 80052ee:	d502      	bpl.n	80052f6 <_puts_r+0x2e>
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d135      	bne.n	8005362 <_puts_r+0x9a>
 80052f6:	4621      	mov	r1, r4
 80052f8:	4628      	mov	r0, r5
 80052fa:	f000 f8e5 	bl	80054c8 <__swsetup_r>
 80052fe:	b380      	cbz	r0, 8005362 <_puts_r+0x9a>
 8005300:	f04f 35ff 	mov.w	r5, #4294967295
 8005304:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005306:	07da      	lsls	r2, r3, #31
 8005308:	d405      	bmi.n	8005316 <_puts_r+0x4e>
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	059b      	lsls	r3, r3, #22
 800530e:	d402      	bmi.n	8005316 <_puts_r+0x4e>
 8005310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005312:	f000 fa05 	bl	8005720 <__retarget_lock_release_recursive>
 8005316:	4628      	mov	r0, r5
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	2b00      	cmp	r3, #0
 800531c:	da04      	bge.n	8005328 <_puts_r+0x60>
 800531e:	69a2      	ldr	r2, [r4, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	dc17      	bgt.n	8005354 <_puts_r+0x8c>
 8005324:	290a      	cmp	r1, #10
 8005326:	d015      	beq.n	8005354 <_puts_r+0x8c>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	6022      	str	r2, [r4, #0]
 800532e:	7019      	strb	r1, [r3, #0]
 8005330:	68a3      	ldr	r3, [r4, #8]
 8005332:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005336:	3b01      	subs	r3, #1
 8005338:	60a3      	str	r3, [r4, #8]
 800533a:	2900      	cmp	r1, #0
 800533c:	d1ed      	bne.n	800531a <_puts_r+0x52>
 800533e:	2b00      	cmp	r3, #0
 8005340:	da11      	bge.n	8005366 <_puts_r+0x9e>
 8005342:	4622      	mov	r2, r4
 8005344:	210a      	movs	r1, #10
 8005346:	4628      	mov	r0, r5
 8005348:	f000 f87f 	bl	800544a <__swbuf_r>
 800534c:	3001      	adds	r0, #1
 800534e:	d0d7      	beq.n	8005300 <_puts_r+0x38>
 8005350:	250a      	movs	r5, #10
 8005352:	e7d7      	b.n	8005304 <_puts_r+0x3c>
 8005354:	4622      	mov	r2, r4
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f877 	bl	800544a <__swbuf_r>
 800535c:	3001      	adds	r0, #1
 800535e:	d1e7      	bne.n	8005330 <_puts_r+0x68>
 8005360:	e7ce      	b.n	8005300 <_puts_r+0x38>
 8005362:	3e01      	subs	r6, #1
 8005364:	e7e4      	b.n	8005330 <_puts_r+0x68>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	6022      	str	r2, [r4, #0]
 800536c:	220a      	movs	r2, #10
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	e7ee      	b.n	8005350 <_puts_r+0x88>
	...

08005374 <puts>:
 8005374:	4b02      	ldr	r3, [pc, #8]	@ (8005380 <puts+0xc>)
 8005376:	4601      	mov	r1, r0
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	f7ff bfa5 	b.w	80052c8 <_puts_r>
 800537e:	bf00      	nop
 8005380:	20000018 	.word	0x20000018

08005384 <siprintf>:
 8005384:	b40e      	push	{r1, r2, r3}
 8005386:	b500      	push	{lr}
 8005388:	b09c      	sub	sp, #112	@ 0x70
 800538a:	ab1d      	add	r3, sp, #116	@ 0x74
 800538c:	9002      	str	r0, [sp, #8]
 800538e:	9006      	str	r0, [sp, #24]
 8005390:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005394:	4809      	ldr	r0, [pc, #36]	@ (80053bc <siprintf+0x38>)
 8005396:	9107      	str	r1, [sp, #28]
 8005398:	9104      	str	r1, [sp, #16]
 800539a:	4909      	ldr	r1, [pc, #36]	@ (80053c0 <siprintf+0x3c>)
 800539c:	f853 2b04 	ldr.w	r2, [r3], #4
 80053a0:	9105      	str	r1, [sp, #20]
 80053a2:	6800      	ldr	r0, [r0, #0]
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	a902      	add	r1, sp, #8
 80053a8:	f000 fb3e 	bl	8005a28 <_svfiprintf_r>
 80053ac:	9b02      	ldr	r3, [sp, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	b01c      	add	sp, #112	@ 0x70
 80053b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b8:	b003      	add	sp, #12
 80053ba:	4770      	bx	lr
 80053bc:	20000018 	.word	0x20000018
 80053c0:	ffff0208 	.word	0xffff0208

080053c4 <__sread>:
 80053c4:	b510      	push	{r4, lr}
 80053c6:	460c      	mov	r4, r1
 80053c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053cc:	f000 f958 	bl	8005680 <_read_r>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	bfab      	itete	ge
 80053d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053d6:	89a3      	ldrhlt	r3, [r4, #12]
 80053d8:	181b      	addge	r3, r3, r0
 80053da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053de:	bfac      	ite	ge
 80053e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053e2:	81a3      	strhlt	r3, [r4, #12]
 80053e4:	bd10      	pop	{r4, pc}

080053e6 <__swrite>:
 80053e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ea:	461f      	mov	r7, r3
 80053ec:	898b      	ldrh	r3, [r1, #12]
 80053ee:	05db      	lsls	r3, r3, #23
 80053f0:	4605      	mov	r5, r0
 80053f2:	460c      	mov	r4, r1
 80053f4:	4616      	mov	r6, r2
 80053f6:	d505      	bpl.n	8005404 <__swrite+0x1e>
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	2302      	movs	r3, #2
 80053fe:	2200      	movs	r2, #0
 8005400:	f000 f92c 	bl	800565c <_lseek_r>
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800540a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800540e:	81a3      	strh	r3, [r4, #12]
 8005410:	4632      	mov	r2, r6
 8005412:	463b      	mov	r3, r7
 8005414:	4628      	mov	r0, r5
 8005416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800541a:	f000 b943 	b.w	80056a4 <_write_r>

0800541e <__sseek>:
 800541e:	b510      	push	{r4, lr}
 8005420:	460c      	mov	r4, r1
 8005422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005426:	f000 f919 	bl	800565c <_lseek_r>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	bf15      	itete	ne
 8005430:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005432:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005436:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800543a:	81a3      	strheq	r3, [r4, #12]
 800543c:	bf18      	it	ne
 800543e:	81a3      	strhne	r3, [r4, #12]
 8005440:	bd10      	pop	{r4, pc}

08005442 <__sclose>:
 8005442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005446:	f000 b8f9 	b.w	800563c <_close_r>

0800544a <__swbuf_r>:
 800544a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544c:	460e      	mov	r6, r1
 800544e:	4614      	mov	r4, r2
 8005450:	4605      	mov	r5, r0
 8005452:	b118      	cbz	r0, 800545c <__swbuf_r+0x12>
 8005454:	6a03      	ldr	r3, [r0, #32]
 8005456:	b90b      	cbnz	r3, 800545c <__swbuf_r+0x12>
 8005458:	f7ff feee 	bl	8005238 <__sinit>
 800545c:	69a3      	ldr	r3, [r4, #24]
 800545e:	60a3      	str	r3, [r4, #8]
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	071a      	lsls	r2, r3, #28
 8005464:	d501      	bpl.n	800546a <__swbuf_r+0x20>
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	b943      	cbnz	r3, 800547c <__swbuf_r+0x32>
 800546a:	4621      	mov	r1, r4
 800546c:	4628      	mov	r0, r5
 800546e:	f000 f82b 	bl	80054c8 <__swsetup_r>
 8005472:	b118      	cbz	r0, 800547c <__swbuf_r+0x32>
 8005474:	f04f 37ff 	mov.w	r7, #4294967295
 8005478:	4638      	mov	r0, r7
 800547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	6922      	ldr	r2, [r4, #16]
 8005480:	1a98      	subs	r0, r3, r2
 8005482:	6963      	ldr	r3, [r4, #20]
 8005484:	b2f6      	uxtb	r6, r6
 8005486:	4283      	cmp	r3, r0
 8005488:	4637      	mov	r7, r6
 800548a:	dc05      	bgt.n	8005498 <__swbuf_r+0x4e>
 800548c:	4621      	mov	r1, r4
 800548e:	4628      	mov	r0, r5
 8005490:	f000 ff1a 	bl	80062c8 <_fflush_r>
 8005494:	2800      	cmp	r0, #0
 8005496:	d1ed      	bne.n	8005474 <__swbuf_r+0x2a>
 8005498:	68a3      	ldr	r3, [r4, #8]
 800549a:	3b01      	subs	r3, #1
 800549c:	60a3      	str	r3, [r4, #8]
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	6022      	str	r2, [r4, #0]
 80054a4:	701e      	strb	r6, [r3, #0]
 80054a6:	6962      	ldr	r2, [r4, #20]
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d004      	beq.n	80054b8 <__swbuf_r+0x6e>
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	07db      	lsls	r3, r3, #31
 80054b2:	d5e1      	bpl.n	8005478 <__swbuf_r+0x2e>
 80054b4:	2e0a      	cmp	r6, #10
 80054b6:	d1df      	bne.n	8005478 <__swbuf_r+0x2e>
 80054b8:	4621      	mov	r1, r4
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 ff04 	bl	80062c8 <_fflush_r>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d0d9      	beq.n	8005478 <__swbuf_r+0x2e>
 80054c4:	e7d6      	b.n	8005474 <__swbuf_r+0x2a>
	...

080054c8 <__swsetup_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4b29      	ldr	r3, [pc, #164]	@ (8005570 <__swsetup_r+0xa8>)
 80054cc:	4605      	mov	r5, r0
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	460c      	mov	r4, r1
 80054d2:	b118      	cbz	r0, 80054dc <__swsetup_r+0x14>
 80054d4:	6a03      	ldr	r3, [r0, #32]
 80054d6:	b90b      	cbnz	r3, 80054dc <__swsetup_r+0x14>
 80054d8:	f7ff feae 	bl	8005238 <__sinit>
 80054dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e0:	0719      	lsls	r1, r3, #28
 80054e2:	d422      	bmi.n	800552a <__swsetup_r+0x62>
 80054e4:	06da      	lsls	r2, r3, #27
 80054e6:	d407      	bmi.n	80054f8 <__swsetup_r+0x30>
 80054e8:	2209      	movs	r2, #9
 80054ea:	602a      	str	r2, [r5, #0]
 80054ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	f04f 30ff 	mov.w	r0, #4294967295
 80054f6:	e033      	b.n	8005560 <__swsetup_r+0x98>
 80054f8:	0758      	lsls	r0, r3, #29
 80054fa:	d512      	bpl.n	8005522 <__swsetup_r+0x5a>
 80054fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054fe:	b141      	cbz	r1, 8005512 <__swsetup_r+0x4a>
 8005500:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005504:	4299      	cmp	r1, r3
 8005506:	d002      	beq.n	800550e <__swsetup_r+0x46>
 8005508:	4628      	mov	r0, r5
 800550a:	f000 f931 	bl	8005770 <_free_r>
 800550e:	2300      	movs	r3, #0
 8005510:	6363      	str	r3, [r4, #52]	@ 0x34
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005518:	81a3      	strh	r3, [r4, #12]
 800551a:	2300      	movs	r3, #0
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	f043 0308 	orr.w	r3, r3, #8
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	6923      	ldr	r3, [r4, #16]
 800552c:	b94b      	cbnz	r3, 8005542 <__swsetup_r+0x7a>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005538:	d003      	beq.n	8005542 <__swsetup_r+0x7a>
 800553a:	4621      	mov	r1, r4
 800553c:	4628      	mov	r0, r5
 800553e:	f000 ff23 	bl	8006388 <__smakebuf_r>
 8005542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005546:	f013 0201 	ands.w	r2, r3, #1
 800554a:	d00a      	beq.n	8005562 <__swsetup_r+0x9a>
 800554c:	2200      	movs	r2, #0
 800554e:	60a2      	str	r2, [r4, #8]
 8005550:	6962      	ldr	r2, [r4, #20]
 8005552:	4252      	negs	r2, r2
 8005554:	61a2      	str	r2, [r4, #24]
 8005556:	6922      	ldr	r2, [r4, #16]
 8005558:	b942      	cbnz	r2, 800556c <__swsetup_r+0xa4>
 800555a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800555e:	d1c5      	bne.n	80054ec <__swsetup_r+0x24>
 8005560:	bd38      	pop	{r3, r4, r5, pc}
 8005562:	0799      	lsls	r1, r3, #30
 8005564:	bf58      	it	pl
 8005566:	6962      	ldrpl	r2, [r4, #20]
 8005568:	60a2      	str	r2, [r4, #8]
 800556a:	e7f4      	b.n	8005556 <__swsetup_r+0x8e>
 800556c:	2000      	movs	r0, #0
 800556e:	e7f7      	b.n	8005560 <__swsetup_r+0x98>
 8005570:	20000018 	.word	0x20000018

08005574 <memset>:
 8005574:	4402      	add	r2, r0
 8005576:	4603      	mov	r3, r0
 8005578:	4293      	cmp	r3, r2
 800557a:	d100      	bne.n	800557e <memset+0xa>
 800557c:	4770      	bx	lr
 800557e:	f803 1b01 	strb.w	r1, [r3], #1
 8005582:	e7f9      	b.n	8005578 <memset+0x4>

08005584 <strtok>:
 8005584:	4b16      	ldr	r3, [pc, #88]	@ (80055e0 <strtok+0x5c>)
 8005586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800558a:	681f      	ldr	r7, [r3, #0]
 800558c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800558e:	4605      	mov	r5, r0
 8005590:	460e      	mov	r6, r1
 8005592:	b9ec      	cbnz	r4, 80055d0 <strtok+0x4c>
 8005594:	2050      	movs	r0, #80	@ 0x50
 8005596:	f000 f935 	bl	8005804 <malloc>
 800559a:	4602      	mov	r2, r0
 800559c:	6478      	str	r0, [r7, #68]	@ 0x44
 800559e:	b920      	cbnz	r0, 80055aa <strtok+0x26>
 80055a0:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <strtok+0x60>)
 80055a2:	4811      	ldr	r0, [pc, #68]	@ (80055e8 <strtok+0x64>)
 80055a4:	215b      	movs	r1, #91	@ 0x5b
 80055a6:	f000 f8c5 	bl	8005734 <__assert_func>
 80055aa:	e9c0 4400 	strd	r4, r4, [r0]
 80055ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80055b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80055b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80055ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80055be:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80055c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80055c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80055ca:	6184      	str	r4, [r0, #24]
 80055cc:	7704      	strb	r4, [r0, #28]
 80055ce:	6244      	str	r4, [r0, #36]	@ 0x24
 80055d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055d2:	4631      	mov	r1, r6
 80055d4:	4628      	mov	r0, r5
 80055d6:	2301      	movs	r3, #1
 80055d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055dc:	f000 b806 	b.w	80055ec <__strtok_r>
 80055e0:	20000018 	.word	0x20000018
 80055e4:	08006740 	.word	0x08006740
 80055e8:	08006757 	.word	0x08006757

080055ec <__strtok_r>:
 80055ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ee:	4604      	mov	r4, r0
 80055f0:	b908      	cbnz	r0, 80055f6 <__strtok_r+0xa>
 80055f2:	6814      	ldr	r4, [r2, #0]
 80055f4:	b144      	cbz	r4, 8005608 <__strtok_r+0x1c>
 80055f6:	4620      	mov	r0, r4
 80055f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80055fc:	460f      	mov	r7, r1
 80055fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005602:	b91e      	cbnz	r6, 800560c <__strtok_r+0x20>
 8005604:	b965      	cbnz	r5, 8005620 <__strtok_r+0x34>
 8005606:	6015      	str	r5, [r2, #0]
 8005608:	2000      	movs	r0, #0
 800560a:	e005      	b.n	8005618 <__strtok_r+0x2c>
 800560c:	42b5      	cmp	r5, r6
 800560e:	d1f6      	bne.n	80055fe <__strtok_r+0x12>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f0      	bne.n	80055f6 <__strtok_r+0xa>
 8005614:	6014      	str	r4, [r2, #0]
 8005616:	7003      	strb	r3, [r0, #0]
 8005618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561a:	461c      	mov	r4, r3
 800561c:	e00c      	b.n	8005638 <__strtok_r+0x4c>
 800561e:	b915      	cbnz	r5, 8005626 <__strtok_r+0x3a>
 8005620:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005624:	460e      	mov	r6, r1
 8005626:	f816 5b01 	ldrb.w	r5, [r6], #1
 800562a:	42ab      	cmp	r3, r5
 800562c:	d1f7      	bne.n	800561e <__strtok_r+0x32>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f3      	beq.n	800561a <__strtok_r+0x2e>
 8005632:	2300      	movs	r3, #0
 8005634:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005638:	6014      	str	r4, [r2, #0]
 800563a:	e7ed      	b.n	8005618 <__strtok_r+0x2c>

0800563c <_close_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d06      	ldr	r5, [pc, #24]	@ (8005658 <_close_r+0x1c>)
 8005640:	2300      	movs	r3, #0
 8005642:	4604      	mov	r4, r0
 8005644:	4608      	mov	r0, r1
 8005646:	602b      	str	r3, [r5, #0]
 8005648:	f7fc fc04 	bl	8001e54 <_close>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_close_r+0x1a>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	b103      	cbz	r3, 8005656 <_close_r+0x1a>
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	200003c4 	.word	0x200003c4

0800565c <_lseek_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4d07      	ldr	r5, [pc, #28]	@ (800567c <_lseek_r+0x20>)
 8005660:	4604      	mov	r4, r0
 8005662:	4608      	mov	r0, r1
 8005664:	4611      	mov	r1, r2
 8005666:	2200      	movs	r2, #0
 8005668:	602a      	str	r2, [r5, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	f7fc fc19 	bl	8001ea2 <_lseek>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d102      	bne.n	800567a <_lseek_r+0x1e>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	b103      	cbz	r3, 800567a <_lseek_r+0x1e>
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	200003c4 	.word	0x200003c4

08005680 <_read_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4d07      	ldr	r5, [pc, #28]	@ (80056a0 <_read_r+0x20>)
 8005684:	4604      	mov	r4, r0
 8005686:	4608      	mov	r0, r1
 8005688:	4611      	mov	r1, r2
 800568a:	2200      	movs	r2, #0
 800568c:	602a      	str	r2, [r5, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	f7fc fba7 	bl	8001de2 <_read>
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	d102      	bne.n	800569e <_read_r+0x1e>
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	b103      	cbz	r3, 800569e <_read_r+0x1e>
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	200003c4 	.word	0x200003c4

080056a4 <_write_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4d07      	ldr	r5, [pc, #28]	@ (80056c4 <_write_r+0x20>)
 80056a8:	4604      	mov	r4, r0
 80056aa:	4608      	mov	r0, r1
 80056ac:	4611      	mov	r1, r2
 80056ae:	2200      	movs	r2, #0
 80056b0:	602a      	str	r2, [r5, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f7fc fbb2 	bl	8001e1c <_write>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d102      	bne.n	80056c2 <_write_r+0x1e>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	b103      	cbz	r3, 80056c2 <_write_r+0x1e>
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	bd38      	pop	{r3, r4, r5, pc}
 80056c4:	200003c4 	.word	0x200003c4

080056c8 <__errno>:
 80056c8:	4b01      	ldr	r3, [pc, #4]	@ (80056d0 <__errno+0x8>)
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20000018 	.word	0x20000018

080056d4 <__libc_init_array>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	4d0d      	ldr	r5, [pc, #52]	@ (800570c <__libc_init_array+0x38>)
 80056d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005710 <__libc_init_array+0x3c>)
 80056da:	1b64      	subs	r4, r4, r5
 80056dc:	10a4      	asrs	r4, r4, #2
 80056de:	2600      	movs	r6, #0
 80056e0:	42a6      	cmp	r6, r4
 80056e2:	d109      	bne.n	80056f8 <__libc_init_array+0x24>
 80056e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005714 <__libc_init_array+0x40>)
 80056e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005718 <__libc_init_array+0x44>)
 80056e8:	f000 ff66 	bl	80065b8 <_init>
 80056ec:	1b64      	subs	r4, r4, r5
 80056ee:	10a4      	asrs	r4, r4, #2
 80056f0:	2600      	movs	r6, #0
 80056f2:	42a6      	cmp	r6, r4
 80056f4:	d105      	bne.n	8005702 <__libc_init_array+0x2e>
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
 80056f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fc:	4798      	blx	r3
 80056fe:	3601      	adds	r6, #1
 8005700:	e7ee      	b.n	80056e0 <__libc_init_array+0xc>
 8005702:	f855 3b04 	ldr.w	r3, [r5], #4
 8005706:	4798      	blx	r3
 8005708:	3601      	adds	r6, #1
 800570a:	e7f2      	b.n	80056f2 <__libc_init_array+0x1e>
 800570c:	08006828 	.word	0x08006828
 8005710:	08006828 	.word	0x08006828
 8005714:	08006828 	.word	0x08006828
 8005718:	0800682c 	.word	0x0800682c

0800571c <__retarget_lock_init_recursive>:
 800571c:	4770      	bx	lr

0800571e <__retarget_lock_acquire_recursive>:
 800571e:	4770      	bx	lr

08005720 <__retarget_lock_release_recursive>:
 8005720:	4770      	bx	lr

08005722 <strcpy>:
 8005722:	4603      	mov	r3, r0
 8005724:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005728:	f803 2b01 	strb.w	r2, [r3], #1
 800572c:	2a00      	cmp	r2, #0
 800572e:	d1f9      	bne.n	8005724 <strcpy+0x2>
 8005730:	4770      	bx	lr
	...

08005734 <__assert_func>:
 8005734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005736:	4614      	mov	r4, r2
 8005738:	461a      	mov	r2, r3
 800573a:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <__assert_func+0x2c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4605      	mov	r5, r0
 8005740:	68d8      	ldr	r0, [r3, #12]
 8005742:	b954      	cbnz	r4, 800575a <__assert_func+0x26>
 8005744:	4b07      	ldr	r3, [pc, #28]	@ (8005764 <__assert_func+0x30>)
 8005746:	461c      	mov	r4, r3
 8005748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800574c:	9100      	str	r1, [sp, #0]
 800574e:	462b      	mov	r3, r5
 8005750:	4905      	ldr	r1, [pc, #20]	@ (8005768 <__assert_func+0x34>)
 8005752:	f000 fde1 	bl	8006318 <fiprintf>
 8005756:	f000 fead 	bl	80064b4 <abort>
 800575a:	4b04      	ldr	r3, [pc, #16]	@ (800576c <__assert_func+0x38>)
 800575c:	e7f4      	b.n	8005748 <__assert_func+0x14>
 800575e:	bf00      	nop
 8005760:	20000018 	.word	0x20000018
 8005764:	080067ec 	.word	0x080067ec
 8005768:	080067be 	.word	0x080067be
 800576c:	080067b1 	.word	0x080067b1

08005770 <_free_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4605      	mov	r5, r0
 8005774:	2900      	cmp	r1, #0
 8005776:	d041      	beq.n	80057fc <_free_r+0x8c>
 8005778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800577c:	1f0c      	subs	r4, r1, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	bfb8      	it	lt
 8005782:	18e4      	addlt	r4, r4, r3
 8005784:	f000 f8e8 	bl	8005958 <__malloc_lock>
 8005788:	4a1d      	ldr	r2, [pc, #116]	@ (8005800 <_free_r+0x90>)
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	b933      	cbnz	r3, 800579c <_free_r+0x2c>
 800578e:	6063      	str	r3, [r4, #4]
 8005790:	6014      	str	r4, [r2, #0]
 8005792:	4628      	mov	r0, r5
 8005794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005798:	f000 b8e4 	b.w	8005964 <__malloc_unlock>
 800579c:	42a3      	cmp	r3, r4
 800579e:	d908      	bls.n	80057b2 <_free_r+0x42>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	1821      	adds	r1, r4, r0
 80057a4:	428b      	cmp	r3, r1
 80057a6:	bf01      	itttt	eq
 80057a8:	6819      	ldreq	r1, [r3, #0]
 80057aa:	685b      	ldreq	r3, [r3, #4]
 80057ac:	1809      	addeq	r1, r1, r0
 80057ae:	6021      	streq	r1, [r4, #0]
 80057b0:	e7ed      	b.n	800578e <_free_r+0x1e>
 80057b2:	461a      	mov	r2, r3
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	b10b      	cbz	r3, 80057bc <_free_r+0x4c>
 80057b8:	42a3      	cmp	r3, r4
 80057ba:	d9fa      	bls.n	80057b2 <_free_r+0x42>
 80057bc:	6811      	ldr	r1, [r2, #0]
 80057be:	1850      	adds	r0, r2, r1
 80057c0:	42a0      	cmp	r0, r4
 80057c2:	d10b      	bne.n	80057dc <_free_r+0x6c>
 80057c4:	6820      	ldr	r0, [r4, #0]
 80057c6:	4401      	add	r1, r0
 80057c8:	1850      	adds	r0, r2, r1
 80057ca:	4283      	cmp	r3, r0
 80057cc:	6011      	str	r1, [r2, #0]
 80057ce:	d1e0      	bne.n	8005792 <_free_r+0x22>
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	6053      	str	r3, [r2, #4]
 80057d6:	4408      	add	r0, r1
 80057d8:	6010      	str	r0, [r2, #0]
 80057da:	e7da      	b.n	8005792 <_free_r+0x22>
 80057dc:	d902      	bls.n	80057e4 <_free_r+0x74>
 80057de:	230c      	movs	r3, #12
 80057e0:	602b      	str	r3, [r5, #0]
 80057e2:	e7d6      	b.n	8005792 <_free_r+0x22>
 80057e4:	6820      	ldr	r0, [r4, #0]
 80057e6:	1821      	adds	r1, r4, r0
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf04      	itt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	bf04      	itt	eq
 80057f4:	1809      	addeq	r1, r1, r0
 80057f6:	6021      	streq	r1, [r4, #0]
 80057f8:	6054      	str	r4, [r2, #4]
 80057fa:	e7ca      	b.n	8005792 <_free_r+0x22>
 80057fc:	bd38      	pop	{r3, r4, r5, pc}
 80057fe:	bf00      	nop
 8005800:	200003d0 	.word	0x200003d0

08005804 <malloc>:
 8005804:	4b02      	ldr	r3, [pc, #8]	@ (8005810 <malloc+0xc>)
 8005806:	4601      	mov	r1, r0
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	f000 b825 	b.w	8005858 <_malloc_r>
 800580e:	bf00      	nop
 8005810:	20000018 	.word	0x20000018

08005814 <sbrk_aligned>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	4e0f      	ldr	r6, [pc, #60]	@ (8005854 <sbrk_aligned+0x40>)
 8005818:	460c      	mov	r4, r1
 800581a:	6831      	ldr	r1, [r6, #0]
 800581c:	4605      	mov	r5, r0
 800581e:	b911      	cbnz	r1, 8005826 <sbrk_aligned+0x12>
 8005820:	f000 fe2a 	bl	8006478 <_sbrk_r>
 8005824:	6030      	str	r0, [r6, #0]
 8005826:	4621      	mov	r1, r4
 8005828:	4628      	mov	r0, r5
 800582a:	f000 fe25 	bl	8006478 <_sbrk_r>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	d103      	bne.n	800583a <sbrk_aligned+0x26>
 8005832:	f04f 34ff 	mov.w	r4, #4294967295
 8005836:	4620      	mov	r0, r4
 8005838:	bd70      	pop	{r4, r5, r6, pc}
 800583a:	1cc4      	adds	r4, r0, #3
 800583c:	f024 0403 	bic.w	r4, r4, #3
 8005840:	42a0      	cmp	r0, r4
 8005842:	d0f8      	beq.n	8005836 <sbrk_aligned+0x22>
 8005844:	1a21      	subs	r1, r4, r0
 8005846:	4628      	mov	r0, r5
 8005848:	f000 fe16 	bl	8006478 <_sbrk_r>
 800584c:	3001      	adds	r0, #1
 800584e:	d1f2      	bne.n	8005836 <sbrk_aligned+0x22>
 8005850:	e7ef      	b.n	8005832 <sbrk_aligned+0x1e>
 8005852:	bf00      	nop
 8005854:	200003cc 	.word	0x200003cc

08005858 <_malloc_r>:
 8005858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800585c:	1ccd      	adds	r5, r1, #3
 800585e:	f025 0503 	bic.w	r5, r5, #3
 8005862:	3508      	adds	r5, #8
 8005864:	2d0c      	cmp	r5, #12
 8005866:	bf38      	it	cc
 8005868:	250c      	movcc	r5, #12
 800586a:	2d00      	cmp	r5, #0
 800586c:	4606      	mov	r6, r0
 800586e:	db01      	blt.n	8005874 <_malloc_r+0x1c>
 8005870:	42a9      	cmp	r1, r5
 8005872:	d904      	bls.n	800587e <_malloc_r+0x26>
 8005874:	230c      	movs	r3, #12
 8005876:	6033      	str	r3, [r6, #0]
 8005878:	2000      	movs	r0, #0
 800587a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800587e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005954 <_malloc_r+0xfc>
 8005882:	f000 f869 	bl	8005958 <__malloc_lock>
 8005886:	f8d8 3000 	ldr.w	r3, [r8]
 800588a:	461c      	mov	r4, r3
 800588c:	bb44      	cbnz	r4, 80058e0 <_malloc_r+0x88>
 800588e:	4629      	mov	r1, r5
 8005890:	4630      	mov	r0, r6
 8005892:	f7ff ffbf 	bl	8005814 <sbrk_aligned>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	4604      	mov	r4, r0
 800589a:	d158      	bne.n	800594e <_malloc_r+0xf6>
 800589c:	f8d8 4000 	ldr.w	r4, [r8]
 80058a0:	4627      	mov	r7, r4
 80058a2:	2f00      	cmp	r7, #0
 80058a4:	d143      	bne.n	800592e <_malloc_r+0xd6>
 80058a6:	2c00      	cmp	r4, #0
 80058a8:	d04b      	beq.n	8005942 <_malloc_r+0xea>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	4639      	mov	r1, r7
 80058ae:	4630      	mov	r0, r6
 80058b0:	eb04 0903 	add.w	r9, r4, r3
 80058b4:	f000 fde0 	bl	8006478 <_sbrk_r>
 80058b8:	4581      	cmp	r9, r0
 80058ba:	d142      	bne.n	8005942 <_malloc_r+0xea>
 80058bc:	6821      	ldr	r1, [r4, #0]
 80058be:	1a6d      	subs	r5, r5, r1
 80058c0:	4629      	mov	r1, r5
 80058c2:	4630      	mov	r0, r6
 80058c4:	f7ff ffa6 	bl	8005814 <sbrk_aligned>
 80058c8:	3001      	adds	r0, #1
 80058ca:	d03a      	beq.n	8005942 <_malloc_r+0xea>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	442b      	add	r3, r5
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	f8d8 3000 	ldr.w	r3, [r8]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	bb62      	cbnz	r2, 8005934 <_malloc_r+0xdc>
 80058da:	f8c8 7000 	str.w	r7, [r8]
 80058de:	e00f      	b.n	8005900 <_malloc_r+0xa8>
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	1b52      	subs	r2, r2, r5
 80058e4:	d420      	bmi.n	8005928 <_malloc_r+0xd0>
 80058e6:	2a0b      	cmp	r2, #11
 80058e8:	d917      	bls.n	800591a <_malloc_r+0xc2>
 80058ea:	1961      	adds	r1, r4, r5
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	6025      	str	r5, [r4, #0]
 80058f0:	bf18      	it	ne
 80058f2:	6059      	strne	r1, [r3, #4]
 80058f4:	6863      	ldr	r3, [r4, #4]
 80058f6:	bf08      	it	eq
 80058f8:	f8c8 1000 	streq.w	r1, [r8]
 80058fc:	5162      	str	r2, [r4, r5]
 80058fe:	604b      	str	r3, [r1, #4]
 8005900:	4630      	mov	r0, r6
 8005902:	f000 f82f 	bl	8005964 <__malloc_unlock>
 8005906:	f104 000b 	add.w	r0, r4, #11
 800590a:	1d23      	adds	r3, r4, #4
 800590c:	f020 0007 	bic.w	r0, r0, #7
 8005910:	1ac2      	subs	r2, r0, r3
 8005912:	bf1c      	itt	ne
 8005914:	1a1b      	subne	r3, r3, r0
 8005916:	50a3      	strne	r3, [r4, r2]
 8005918:	e7af      	b.n	800587a <_malloc_r+0x22>
 800591a:	6862      	ldr	r2, [r4, #4]
 800591c:	42a3      	cmp	r3, r4
 800591e:	bf0c      	ite	eq
 8005920:	f8c8 2000 	streq.w	r2, [r8]
 8005924:	605a      	strne	r2, [r3, #4]
 8005926:	e7eb      	b.n	8005900 <_malloc_r+0xa8>
 8005928:	4623      	mov	r3, r4
 800592a:	6864      	ldr	r4, [r4, #4]
 800592c:	e7ae      	b.n	800588c <_malloc_r+0x34>
 800592e:	463c      	mov	r4, r7
 8005930:	687f      	ldr	r7, [r7, #4]
 8005932:	e7b6      	b.n	80058a2 <_malloc_r+0x4a>
 8005934:	461a      	mov	r2, r3
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	42a3      	cmp	r3, r4
 800593a:	d1fb      	bne.n	8005934 <_malloc_r+0xdc>
 800593c:	2300      	movs	r3, #0
 800593e:	6053      	str	r3, [r2, #4]
 8005940:	e7de      	b.n	8005900 <_malloc_r+0xa8>
 8005942:	230c      	movs	r3, #12
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	4630      	mov	r0, r6
 8005948:	f000 f80c 	bl	8005964 <__malloc_unlock>
 800594c:	e794      	b.n	8005878 <_malloc_r+0x20>
 800594e:	6005      	str	r5, [r0, #0]
 8005950:	e7d6      	b.n	8005900 <_malloc_r+0xa8>
 8005952:	bf00      	nop
 8005954:	200003d0 	.word	0x200003d0

08005958 <__malloc_lock>:
 8005958:	4801      	ldr	r0, [pc, #4]	@ (8005960 <__malloc_lock+0x8>)
 800595a:	f7ff bee0 	b.w	800571e <__retarget_lock_acquire_recursive>
 800595e:	bf00      	nop
 8005960:	200003c8 	.word	0x200003c8

08005964 <__malloc_unlock>:
 8005964:	4801      	ldr	r0, [pc, #4]	@ (800596c <__malloc_unlock+0x8>)
 8005966:	f7ff bedb 	b.w	8005720 <__retarget_lock_release_recursive>
 800596a:	bf00      	nop
 800596c:	200003c8 	.word	0x200003c8

08005970 <__ssputs_r>:
 8005970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	688e      	ldr	r6, [r1, #8]
 8005976:	461f      	mov	r7, r3
 8005978:	42be      	cmp	r6, r7
 800597a:	680b      	ldr	r3, [r1, #0]
 800597c:	4682      	mov	sl, r0
 800597e:	460c      	mov	r4, r1
 8005980:	4690      	mov	r8, r2
 8005982:	d82d      	bhi.n	80059e0 <__ssputs_r+0x70>
 8005984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005988:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800598c:	d026      	beq.n	80059dc <__ssputs_r+0x6c>
 800598e:	6965      	ldr	r5, [r4, #20]
 8005990:	6909      	ldr	r1, [r1, #16]
 8005992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005996:	eba3 0901 	sub.w	r9, r3, r1
 800599a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800599e:	1c7b      	adds	r3, r7, #1
 80059a0:	444b      	add	r3, r9
 80059a2:	106d      	asrs	r5, r5, #1
 80059a4:	429d      	cmp	r5, r3
 80059a6:	bf38      	it	cc
 80059a8:	461d      	movcc	r5, r3
 80059aa:	0553      	lsls	r3, r2, #21
 80059ac:	d527      	bpl.n	80059fe <__ssputs_r+0x8e>
 80059ae:	4629      	mov	r1, r5
 80059b0:	f7ff ff52 	bl	8005858 <_malloc_r>
 80059b4:	4606      	mov	r6, r0
 80059b6:	b360      	cbz	r0, 8005a12 <__ssputs_r+0xa2>
 80059b8:	6921      	ldr	r1, [r4, #16]
 80059ba:	464a      	mov	r2, r9
 80059bc:	f000 fd6c 	bl	8006498 <memcpy>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80059c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	6126      	str	r6, [r4, #16]
 80059ce:	6165      	str	r5, [r4, #20]
 80059d0:	444e      	add	r6, r9
 80059d2:	eba5 0509 	sub.w	r5, r5, r9
 80059d6:	6026      	str	r6, [r4, #0]
 80059d8:	60a5      	str	r5, [r4, #8]
 80059da:	463e      	mov	r6, r7
 80059dc:	42be      	cmp	r6, r7
 80059de:	d900      	bls.n	80059e2 <__ssputs_r+0x72>
 80059e0:	463e      	mov	r6, r7
 80059e2:	6820      	ldr	r0, [r4, #0]
 80059e4:	4632      	mov	r2, r6
 80059e6:	4641      	mov	r1, r8
 80059e8:	f000 fd0a 	bl	8006400 <memmove>
 80059ec:	68a3      	ldr	r3, [r4, #8]
 80059ee:	1b9b      	subs	r3, r3, r6
 80059f0:	60a3      	str	r3, [r4, #8]
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	4433      	add	r3, r6
 80059f6:	6023      	str	r3, [r4, #0]
 80059f8:	2000      	movs	r0, #0
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	462a      	mov	r2, r5
 8005a00:	f000 fd5f 	bl	80064c2 <_realloc_r>
 8005a04:	4606      	mov	r6, r0
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d1e0      	bne.n	80059cc <__ssputs_r+0x5c>
 8005a0a:	6921      	ldr	r1, [r4, #16]
 8005a0c:	4650      	mov	r0, sl
 8005a0e:	f7ff feaf 	bl	8005770 <_free_r>
 8005a12:	230c      	movs	r3, #12
 8005a14:	f8ca 3000 	str.w	r3, [sl]
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	e7e9      	b.n	80059fa <__ssputs_r+0x8a>
	...

08005a28 <_svfiprintf_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	4698      	mov	r8, r3
 8005a2e:	898b      	ldrh	r3, [r1, #12]
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	b09d      	sub	sp, #116	@ 0x74
 8005a34:	4607      	mov	r7, r0
 8005a36:	460d      	mov	r5, r1
 8005a38:	4614      	mov	r4, r2
 8005a3a:	d510      	bpl.n	8005a5e <_svfiprintf_r+0x36>
 8005a3c:	690b      	ldr	r3, [r1, #16]
 8005a3e:	b973      	cbnz	r3, 8005a5e <_svfiprintf_r+0x36>
 8005a40:	2140      	movs	r1, #64	@ 0x40
 8005a42:	f7ff ff09 	bl	8005858 <_malloc_r>
 8005a46:	6028      	str	r0, [r5, #0]
 8005a48:	6128      	str	r0, [r5, #16]
 8005a4a:	b930      	cbnz	r0, 8005a5a <_svfiprintf_r+0x32>
 8005a4c:	230c      	movs	r3, #12
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	b01d      	add	sp, #116	@ 0x74
 8005a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5a:	2340      	movs	r3, #64	@ 0x40
 8005a5c:	616b      	str	r3, [r5, #20]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a62:	2320      	movs	r3, #32
 8005a64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a6c:	2330      	movs	r3, #48	@ 0x30
 8005a6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c0c <_svfiprintf_r+0x1e4>
 8005a72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a76:	f04f 0901 	mov.w	r9, #1
 8005a7a:	4623      	mov	r3, r4
 8005a7c:	469a      	mov	sl, r3
 8005a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a82:	b10a      	cbz	r2, 8005a88 <_svfiprintf_r+0x60>
 8005a84:	2a25      	cmp	r2, #37	@ 0x25
 8005a86:	d1f9      	bne.n	8005a7c <_svfiprintf_r+0x54>
 8005a88:	ebba 0b04 	subs.w	fp, sl, r4
 8005a8c:	d00b      	beq.n	8005aa6 <_svfiprintf_r+0x7e>
 8005a8e:	465b      	mov	r3, fp
 8005a90:	4622      	mov	r2, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	4638      	mov	r0, r7
 8005a96:	f7ff ff6b 	bl	8005970 <__ssputs_r>
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f000 80a7 	beq.w	8005bee <_svfiprintf_r+0x1c6>
 8005aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aa2:	445a      	add	r2, fp
 8005aa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 809f 	beq.w	8005bee <_svfiprintf_r+0x1c6>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aba:	f10a 0a01 	add.w	sl, sl, #1
 8005abe:	9304      	str	r3, [sp, #16]
 8005ac0:	9307      	str	r3, [sp, #28]
 8005ac2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ac6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ac8:	4654      	mov	r4, sl
 8005aca:	2205      	movs	r2, #5
 8005acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad0:	484e      	ldr	r0, [pc, #312]	@ (8005c0c <_svfiprintf_r+0x1e4>)
 8005ad2:	f7fa fb9d 	bl	8000210 <memchr>
 8005ad6:	9a04      	ldr	r2, [sp, #16]
 8005ad8:	b9d8      	cbnz	r0, 8005b12 <_svfiprintf_r+0xea>
 8005ada:	06d0      	lsls	r0, r2, #27
 8005adc:	bf44      	itt	mi
 8005ade:	2320      	movmi	r3, #32
 8005ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ae4:	0711      	lsls	r1, r2, #28
 8005ae6:	bf44      	itt	mi
 8005ae8:	232b      	movmi	r3, #43	@ 0x2b
 8005aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aee:	f89a 3000 	ldrb.w	r3, [sl]
 8005af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af4:	d015      	beq.n	8005b22 <_svfiprintf_r+0xfa>
 8005af6:	9a07      	ldr	r2, [sp, #28]
 8005af8:	4654      	mov	r4, sl
 8005afa:	2000      	movs	r0, #0
 8005afc:	f04f 0c0a 	mov.w	ip, #10
 8005b00:	4621      	mov	r1, r4
 8005b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b06:	3b30      	subs	r3, #48	@ 0x30
 8005b08:	2b09      	cmp	r3, #9
 8005b0a:	d94b      	bls.n	8005ba4 <_svfiprintf_r+0x17c>
 8005b0c:	b1b0      	cbz	r0, 8005b3c <_svfiprintf_r+0x114>
 8005b0e:	9207      	str	r2, [sp, #28]
 8005b10:	e014      	b.n	8005b3c <_svfiprintf_r+0x114>
 8005b12:	eba0 0308 	sub.w	r3, r0, r8
 8005b16:	fa09 f303 	lsl.w	r3, r9, r3
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	9304      	str	r3, [sp, #16]
 8005b1e:	46a2      	mov	sl, r4
 8005b20:	e7d2      	b.n	8005ac8 <_svfiprintf_r+0xa0>
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	1d19      	adds	r1, r3, #4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	9103      	str	r1, [sp, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bfbb      	ittet	lt
 8005b2e:	425b      	neglt	r3, r3
 8005b30:	f042 0202 	orrlt.w	r2, r2, #2
 8005b34:	9307      	strge	r3, [sp, #28]
 8005b36:	9307      	strlt	r3, [sp, #28]
 8005b38:	bfb8      	it	lt
 8005b3a:	9204      	strlt	r2, [sp, #16]
 8005b3c:	7823      	ldrb	r3, [r4, #0]
 8005b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b40:	d10a      	bne.n	8005b58 <_svfiprintf_r+0x130>
 8005b42:	7863      	ldrb	r3, [r4, #1]
 8005b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b46:	d132      	bne.n	8005bae <_svfiprintf_r+0x186>
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	1d1a      	adds	r2, r3, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	9203      	str	r2, [sp, #12]
 8005b50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b54:	3402      	adds	r4, #2
 8005b56:	9305      	str	r3, [sp, #20]
 8005b58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c1c <_svfiprintf_r+0x1f4>
 8005b5c:	7821      	ldrb	r1, [r4, #0]
 8005b5e:	2203      	movs	r2, #3
 8005b60:	4650      	mov	r0, sl
 8005b62:	f7fa fb55 	bl	8000210 <memchr>
 8005b66:	b138      	cbz	r0, 8005b78 <_svfiprintf_r+0x150>
 8005b68:	9b04      	ldr	r3, [sp, #16]
 8005b6a:	eba0 000a 	sub.w	r0, r0, sl
 8005b6e:	2240      	movs	r2, #64	@ 0x40
 8005b70:	4082      	lsls	r2, r0
 8005b72:	4313      	orrs	r3, r2
 8005b74:	3401      	adds	r4, #1
 8005b76:	9304      	str	r3, [sp, #16]
 8005b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7c:	4824      	ldr	r0, [pc, #144]	@ (8005c10 <_svfiprintf_r+0x1e8>)
 8005b7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b82:	2206      	movs	r2, #6
 8005b84:	f7fa fb44 	bl	8000210 <memchr>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d036      	beq.n	8005bfa <_svfiprintf_r+0x1d2>
 8005b8c:	4b21      	ldr	r3, [pc, #132]	@ (8005c14 <_svfiprintf_r+0x1ec>)
 8005b8e:	bb1b      	cbnz	r3, 8005bd8 <_svfiprintf_r+0x1b0>
 8005b90:	9b03      	ldr	r3, [sp, #12]
 8005b92:	3307      	adds	r3, #7
 8005b94:	f023 0307 	bic.w	r3, r3, #7
 8005b98:	3308      	adds	r3, #8
 8005b9a:	9303      	str	r3, [sp, #12]
 8005b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9e:	4433      	add	r3, r6
 8005ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba2:	e76a      	b.n	8005a7a <_svfiprintf_r+0x52>
 8005ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ba8:	460c      	mov	r4, r1
 8005baa:	2001      	movs	r0, #1
 8005bac:	e7a8      	b.n	8005b00 <_svfiprintf_r+0xd8>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	3401      	adds	r4, #1
 8005bb2:	9305      	str	r3, [sp, #20]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f04f 0c0a 	mov.w	ip, #10
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bc0:	3a30      	subs	r2, #48	@ 0x30
 8005bc2:	2a09      	cmp	r2, #9
 8005bc4:	d903      	bls.n	8005bce <_svfiprintf_r+0x1a6>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0c6      	beq.n	8005b58 <_svfiprintf_r+0x130>
 8005bca:	9105      	str	r1, [sp, #20]
 8005bcc:	e7c4      	b.n	8005b58 <_svfiprintf_r+0x130>
 8005bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e7f0      	b.n	8005bba <_svfiprintf_r+0x192>
 8005bd8:	ab03      	add	r3, sp, #12
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	462a      	mov	r2, r5
 8005bde:	4b0e      	ldr	r3, [pc, #56]	@ (8005c18 <_svfiprintf_r+0x1f0>)
 8005be0:	a904      	add	r1, sp, #16
 8005be2:	4638      	mov	r0, r7
 8005be4:	f3af 8000 	nop.w
 8005be8:	1c42      	adds	r2, r0, #1
 8005bea:	4606      	mov	r6, r0
 8005bec:	d1d6      	bne.n	8005b9c <_svfiprintf_r+0x174>
 8005bee:	89ab      	ldrh	r3, [r5, #12]
 8005bf0:	065b      	lsls	r3, r3, #25
 8005bf2:	f53f af2d 	bmi.w	8005a50 <_svfiprintf_r+0x28>
 8005bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bf8:	e72c      	b.n	8005a54 <_svfiprintf_r+0x2c>
 8005bfa:	ab03      	add	r3, sp, #12
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	462a      	mov	r2, r5
 8005c00:	4b05      	ldr	r3, [pc, #20]	@ (8005c18 <_svfiprintf_r+0x1f0>)
 8005c02:	a904      	add	r1, sp, #16
 8005c04:	4638      	mov	r0, r7
 8005c06:	f000 f9bb 	bl	8005f80 <_printf_i>
 8005c0a:	e7ed      	b.n	8005be8 <_svfiprintf_r+0x1c0>
 8005c0c:	080067ed 	.word	0x080067ed
 8005c10:	080067f7 	.word	0x080067f7
 8005c14:	00000000 	.word	0x00000000
 8005c18:	08005971 	.word	0x08005971
 8005c1c:	080067f3 	.word	0x080067f3

08005c20 <__sfputc_r>:
 8005c20:	6893      	ldr	r3, [r2, #8]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	b410      	push	{r4}
 8005c28:	6093      	str	r3, [r2, #8]
 8005c2a:	da08      	bge.n	8005c3e <__sfputc_r+0x1e>
 8005c2c:	6994      	ldr	r4, [r2, #24]
 8005c2e:	42a3      	cmp	r3, r4
 8005c30:	db01      	blt.n	8005c36 <__sfputc_r+0x16>
 8005c32:	290a      	cmp	r1, #10
 8005c34:	d103      	bne.n	8005c3e <__sfputc_r+0x1e>
 8005c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c3a:	f7ff bc06 	b.w	800544a <__swbuf_r>
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	1c58      	adds	r0, r3, #1
 8005c42:	6010      	str	r0, [r2, #0]
 8005c44:	7019      	strb	r1, [r3, #0]
 8005c46:	4608      	mov	r0, r1
 8005c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <__sfputs_r>:
 8005c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c50:	4606      	mov	r6, r0
 8005c52:	460f      	mov	r7, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	18d5      	adds	r5, r2, r3
 8005c58:	42ac      	cmp	r4, r5
 8005c5a:	d101      	bne.n	8005c60 <__sfputs_r+0x12>
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e007      	b.n	8005c70 <__sfputs_r+0x22>
 8005c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c64:	463a      	mov	r2, r7
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7ff ffda 	bl	8005c20 <__sfputc_r>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d1f3      	bne.n	8005c58 <__sfputs_r+0xa>
 8005c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c74 <_vfiprintf_r>:
 8005c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c78:	460d      	mov	r5, r1
 8005c7a:	b09d      	sub	sp, #116	@ 0x74
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	4698      	mov	r8, r3
 8005c80:	4606      	mov	r6, r0
 8005c82:	b118      	cbz	r0, 8005c8c <_vfiprintf_r+0x18>
 8005c84:	6a03      	ldr	r3, [r0, #32]
 8005c86:	b90b      	cbnz	r3, 8005c8c <_vfiprintf_r+0x18>
 8005c88:	f7ff fad6 	bl	8005238 <__sinit>
 8005c8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c8e:	07d9      	lsls	r1, r3, #31
 8005c90:	d405      	bmi.n	8005c9e <_vfiprintf_r+0x2a>
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	059a      	lsls	r2, r3, #22
 8005c96:	d402      	bmi.n	8005c9e <_vfiprintf_r+0x2a>
 8005c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c9a:	f7ff fd40 	bl	800571e <__retarget_lock_acquire_recursive>
 8005c9e:	89ab      	ldrh	r3, [r5, #12]
 8005ca0:	071b      	lsls	r3, r3, #28
 8005ca2:	d501      	bpl.n	8005ca8 <_vfiprintf_r+0x34>
 8005ca4:	692b      	ldr	r3, [r5, #16]
 8005ca6:	b99b      	cbnz	r3, 8005cd0 <_vfiprintf_r+0x5c>
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4630      	mov	r0, r6
 8005cac:	f7ff fc0c 	bl	80054c8 <__swsetup_r>
 8005cb0:	b170      	cbz	r0, 8005cd0 <_vfiprintf_r+0x5c>
 8005cb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cb4:	07dc      	lsls	r4, r3, #31
 8005cb6:	d504      	bpl.n	8005cc2 <_vfiprintf_r+0x4e>
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	b01d      	add	sp, #116	@ 0x74
 8005cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc2:	89ab      	ldrh	r3, [r5, #12]
 8005cc4:	0598      	lsls	r0, r3, #22
 8005cc6:	d4f7      	bmi.n	8005cb8 <_vfiprintf_r+0x44>
 8005cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cca:	f7ff fd29 	bl	8005720 <__retarget_lock_release_recursive>
 8005cce:	e7f3      	b.n	8005cb8 <_vfiprintf_r+0x44>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cde:	2330      	movs	r3, #48	@ 0x30
 8005ce0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e90 <_vfiprintf_r+0x21c>
 8005ce4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ce8:	f04f 0901 	mov.w	r9, #1
 8005cec:	4623      	mov	r3, r4
 8005cee:	469a      	mov	sl, r3
 8005cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cf4:	b10a      	cbz	r2, 8005cfa <_vfiprintf_r+0x86>
 8005cf6:	2a25      	cmp	r2, #37	@ 0x25
 8005cf8:	d1f9      	bne.n	8005cee <_vfiprintf_r+0x7a>
 8005cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8005cfe:	d00b      	beq.n	8005d18 <_vfiprintf_r+0xa4>
 8005d00:	465b      	mov	r3, fp
 8005d02:	4622      	mov	r2, r4
 8005d04:	4629      	mov	r1, r5
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7ff ffa1 	bl	8005c4e <__sfputs_r>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	f000 80a7 	beq.w	8005e60 <_vfiprintf_r+0x1ec>
 8005d12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d14:	445a      	add	r2, fp
 8005d16:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d18:	f89a 3000 	ldrb.w	r3, [sl]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 809f 	beq.w	8005e60 <_vfiprintf_r+0x1ec>
 8005d22:	2300      	movs	r3, #0
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295
 8005d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d2c:	f10a 0a01 	add.w	sl, sl, #1
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	9307      	str	r3, [sp, #28]
 8005d34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d38:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d3a:	4654      	mov	r4, sl
 8005d3c:	2205      	movs	r2, #5
 8005d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d42:	4853      	ldr	r0, [pc, #332]	@ (8005e90 <_vfiprintf_r+0x21c>)
 8005d44:	f7fa fa64 	bl	8000210 <memchr>
 8005d48:	9a04      	ldr	r2, [sp, #16]
 8005d4a:	b9d8      	cbnz	r0, 8005d84 <_vfiprintf_r+0x110>
 8005d4c:	06d1      	lsls	r1, r2, #27
 8005d4e:	bf44      	itt	mi
 8005d50:	2320      	movmi	r3, #32
 8005d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d56:	0713      	lsls	r3, r2, #28
 8005d58:	bf44      	itt	mi
 8005d5a:	232b      	movmi	r3, #43	@ 0x2b
 8005d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d60:	f89a 3000 	ldrb.w	r3, [sl]
 8005d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d66:	d015      	beq.n	8005d94 <_vfiprintf_r+0x120>
 8005d68:	9a07      	ldr	r2, [sp, #28]
 8005d6a:	4654      	mov	r4, sl
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f04f 0c0a 	mov.w	ip, #10
 8005d72:	4621      	mov	r1, r4
 8005d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d78:	3b30      	subs	r3, #48	@ 0x30
 8005d7a:	2b09      	cmp	r3, #9
 8005d7c:	d94b      	bls.n	8005e16 <_vfiprintf_r+0x1a2>
 8005d7e:	b1b0      	cbz	r0, 8005dae <_vfiprintf_r+0x13a>
 8005d80:	9207      	str	r2, [sp, #28]
 8005d82:	e014      	b.n	8005dae <_vfiprintf_r+0x13a>
 8005d84:	eba0 0308 	sub.w	r3, r0, r8
 8005d88:	fa09 f303 	lsl.w	r3, r9, r3
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	9304      	str	r3, [sp, #16]
 8005d90:	46a2      	mov	sl, r4
 8005d92:	e7d2      	b.n	8005d3a <_vfiprintf_r+0xc6>
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	1d19      	adds	r1, r3, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	9103      	str	r1, [sp, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bfbb      	ittet	lt
 8005da0:	425b      	neglt	r3, r3
 8005da2:	f042 0202 	orrlt.w	r2, r2, #2
 8005da6:	9307      	strge	r3, [sp, #28]
 8005da8:	9307      	strlt	r3, [sp, #28]
 8005daa:	bfb8      	it	lt
 8005dac:	9204      	strlt	r2, [sp, #16]
 8005dae:	7823      	ldrb	r3, [r4, #0]
 8005db0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005db2:	d10a      	bne.n	8005dca <_vfiprintf_r+0x156>
 8005db4:	7863      	ldrb	r3, [r4, #1]
 8005db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005db8:	d132      	bne.n	8005e20 <_vfiprintf_r+0x1ac>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	1d1a      	adds	r2, r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	9203      	str	r2, [sp, #12]
 8005dc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dc6:	3402      	adds	r4, #2
 8005dc8:	9305      	str	r3, [sp, #20]
 8005dca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ea0 <_vfiprintf_r+0x22c>
 8005dce:	7821      	ldrb	r1, [r4, #0]
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	f7fa fa1c 	bl	8000210 <memchr>
 8005dd8:	b138      	cbz	r0, 8005dea <_vfiprintf_r+0x176>
 8005dda:	9b04      	ldr	r3, [sp, #16]
 8005ddc:	eba0 000a 	sub.w	r0, r0, sl
 8005de0:	2240      	movs	r2, #64	@ 0x40
 8005de2:	4082      	lsls	r2, r0
 8005de4:	4313      	orrs	r3, r2
 8005de6:	3401      	adds	r4, #1
 8005de8:	9304      	str	r3, [sp, #16]
 8005dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dee:	4829      	ldr	r0, [pc, #164]	@ (8005e94 <_vfiprintf_r+0x220>)
 8005df0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005df4:	2206      	movs	r2, #6
 8005df6:	f7fa fa0b 	bl	8000210 <memchr>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d03f      	beq.n	8005e7e <_vfiprintf_r+0x20a>
 8005dfe:	4b26      	ldr	r3, [pc, #152]	@ (8005e98 <_vfiprintf_r+0x224>)
 8005e00:	bb1b      	cbnz	r3, 8005e4a <_vfiprintf_r+0x1d6>
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	3307      	adds	r3, #7
 8005e06:	f023 0307 	bic.w	r3, r3, #7
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	9303      	str	r3, [sp, #12]
 8005e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e10:	443b      	add	r3, r7
 8005e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e14:	e76a      	b.n	8005cec <_vfiprintf_r+0x78>
 8005e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	e7a8      	b.n	8005d72 <_vfiprintf_r+0xfe>
 8005e20:	2300      	movs	r3, #0
 8005e22:	3401      	adds	r4, #1
 8005e24:	9305      	str	r3, [sp, #20]
 8005e26:	4619      	mov	r1, r3
 8005e28:	f04f 0c0a 	mov.w	ip, #10
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e32:	3a30      	subs	r2, #48	@ 0x30
 8005e34:	2a09      	cmp	r2, #9
 8005e36:	d903      	bls.n	8005e40 <_vfiprintf_r+0x1cc>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0c6      	beq.n	8005dca <_vfiprintf_r+0x156>
 8005e3c:	9105      	str	r1, [sp, #20]
 8005e3e:	e7c4      	b.n	8005dca <_vfiprintf_r+0x156>
 8005e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e44:	4604      	mov	r4, r0
 8005e46:	2301      	movs	r3, #1
 8005e48:	e7f0      	b.n	8005e2c <_vfiprintf_r+0x1b8>
 8005e4a:	ab03      	add	r3, sp, #12
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	462a      	mov	r2, r5
 8005e50:	4b12      	ldr	r3, [pc, #72]	@ (8005e9c <_vfiprintf_r+0x228>)
 8005e52:	a904      	add	r1, sp, #16
 8005e54:	4630      	mov	r0, r6
 8005e56:	f3af 8000 	nop.w
 8005e5a:	4607      	mov	r7, r0
 8005e5c:	1c78      	adds	r0, r7, #1
 8005e5e:	d1d6      	bne.n	8005e0e <_vfiprintf_r+0x19a>
 8005e60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e62:	07d9      	lsls	r1, r3, #31
 8005e64:	d405      	bmi.n	8005e72 <_vfiprintf_r+0x1fe>
 8005e66:	89ab      	ldrh	r3, [r5, #12]
 8005e68:	059a      	lsls	r2, r3, #22
 8005e6a:	d402      	bmi.n	8005e72 <_vfiprintf_r+0x1fe>
 8005e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e6e:	f7ff fc57 	bl	8005720 <__retarget_lock_release_recursive>
 8005e72:	89ab      	ldrh	r3, [r5, #12]
 8005e74:	065b      	lsls	r3, r3, #25
 8005e76:	f53f af1f 	bmi.w	8005cb8 <_vfiprintf_r+0x44>
 8005e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e7c:	e71e      	b.n	8005cbc <_vfiprintf_r+0x48>
 8005e7e:	ab03      	add	r3, sp, #12
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	462a      	mov	r2, r5
 8005e84:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <_vfiprintf_r+0x228>)
 8005e86:	a904      	add	r1, sp, #16
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f000 f879 	bl	8005f80 <_printf_i>
 8005e8e:	e7e4      	b.n	8005e5a <_vfiprintf_r+0x1e6>
 8005e90:	080067ed 	.word	0x080067ed
 8005e94:	080067f7 	.word	0x080067f7
 8005e98:	00000000 	.word	0x00000000
 8005e9c:	08005c4f 	.word	0x08005c4f
 8005ea0:	080067f3 	.word	0x080067f3

08005ea4 <_printf_common>:
 8005ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	4698      	mov	r8, r3
 8005eac:	688a      	ldr	r2, [r1, #8]
 8005eae:	690b      	ldr	r3, [r1, #16]
 8005eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	bfb8      	it	lt
 8005eb8:	4613      	movlt	r3, r2
 8005eba:	6033      	str	r3, [r6, #0]
 8005ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	b10a      	cbz	r2, 8005eca <_printf_common+0x26>
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	6033      	str	r3, [r6, #0]
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	0699      	lsls	r1, r3, #26
 8005ece:	bf42      	ittt	mi
 8005ed0:	6833      	ldrmi	r3, [r6, #0]
 8005ed2:	3302      	addmi	r3, #2
 8005ed4:	6033      	strmi	r3, [r6, #0]
 8005ed6:	6825      	ldr	r5, [r4, #0]
 8005ed8:	f015 0506 	ands.w	r5, r5, #6
 8005edc:	d106      	bne.n	8005eec <_printf_common+0x48>
 8005ede:	f104 0a19 	add.w	sl, r4, #25
 8005ee2:	68e3      	ldr	r3, [r4, #12]
 8005ee4:	6832      	ldr	r2, [r6, #0]
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	42ab      	cmp	r3, r5
 8005eea:	dc26      	bgt.n	8005f3a <_printf_common+0x96>
 8005eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	3b00      	subs	r3, #0
 8005ef4:	bf18      	it	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	0692      	lsls	r2, r2, #26
 8005efa:	d42b      	bmi.n	8005f54 <_printf_common+0xb0>
 8005efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f00:	4641      	mov	r1, r8
 8005f02:	4638      	mov	r0, r7
 8005f04:	47c8      	blx	r9
 8005f06:	3001      	adds	r0, #1
 8005f08:	d01e      	beq.n	8005f48 <_printf_common+0xa4>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	6922      	ldr	r2, [r4, #16]
 8005f0e:	f003 0306 	and.w	r3, r3, #6
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	bf02      	ittt	eq
 8005f16:	68e5      	ldreq	r5, [r4, #12]
 8005f18:	6833      	ldreq	r3, [r6, #0]
 8005f1a:	1aed      	subeq	r5, r5, r3
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	bf0c      	ite	eq
 8005f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f24:	2500      	movne	r5, #0
 8005f26:	4293      	cmp	r3, r2
 8005f28:	bfc4      	itt	gt
 8005f2a:	1a9b      	subgt	r3, r3, r2
 8005f2c:	18ed      	addgt	r5, r5, r3
 8005f2e:	2600      	movs	r6, #0
 8005f30:	341a      	adds	r4, #26
 8005f32:	42b5      	cmp	r5, r6
 8005f34:	d11a      	bne.n	8005f6c <_printf_common+0xc8>
 8005f36:	2000      	movs	r0, #0
 8005f38:	e008      	b.n	8005f4c <_printf_common+0xa8>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	4641      	mov	r1, r8
 8005f40:	4638      	mov	r0, r7
 8005f42:	47c8      	blx	r9
 8005f44:	3001      	adds	r0, #1
 8005f46:	d103      	bne.n	8005f50 <_printf_common+0xac>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f50:	3501      	adds	r5, #1
 8005f52:	e7c6      	b.n	8005ee2 <_printf_common+0x3e>
 8005f54:	18e1      	adds	r1, r4, r3
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	2030      	movs	r0, #48	@ 0x30
 8005f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f5e:	4422      	add	r2, r4
 8005f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f68:	3302      	adds	r3, #2
 8005f6a:	e7c7      	b.n	8005efc <_printf_common+0x58>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4622      	mov	r2, r4
 8005f70:	4641      	mov	r1, r8
 8005f72:	4638      	mov	r0, r7
 8005f74:	47c8      	blx	r9
 8005f76:	3001      	adds	r0, #1
 8005f78:	d0e6      	beq.n	8005f48 <_printf_common+0xa4>
 8005f7a:	3601      	adds	r6, #1
 8005f7c:	e7d9      	b.n	8005f32 <_printf_common+0x8e>
	...

08005f80 <_printf_i>:
 8005f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	7e0f      	ldrb	r7, [r1, #24]
 8005f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f88:	2f78      	cmp	r7, #120	@ 0x78
 8005f8a:	4691      	mov	r9, r2
 8005f8c:	4680      	mov	r8, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	469a      	mov	sl, r3
 8005f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f96:	d807      	bhi.n	8005fa8 <_printf_i+0x28>
 8005f98:	2f62      	cmp	r7, #98	@ 0x62
 8005f9a:	d80a      	bhi.n	8005fb2 <_printf_i+0x32>
 8005f9c:	2f00      	cmp	r7, #0
 8005f9e:	f000 80d2 	beq.w	8006146 <_printf_i+0x1c6>
 8005fa2:	2f58      	cmp	r7, #88	@ 0x58
 8005fa4:	f000 80b9 	beq.w	800611a <_printf_i+0x19a>
 8005fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fb0:	e03a      	b.n	8006028 <_printf_i+0xa8>
 8005fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fb6:	2b15      	cmp	r3, #21
 8005fb8:	d8f6      	bhi.n	8005fa8 <_printf_i+0x28>
 8005fba:	a101      	add	r1, pc, #4	@ (adr r1, 8005fc0 <_printf_i+0x40>)
 8005fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fc0:	08006019 	.word	0x08006019
 8005fc4:	0800602d 	.word	0x0800602d
 8005fc8:	08005fa9 	.word	0x08005fa9
 8005fcc:	08005fa9 	.word	0x08005fa9
 8005fd0:	08005fa9 	.word	0x08005fa9
 8005fd4:	08005fa9 	.word	0x08005fa9
 8005fd8:	0800602d 	.word	0x0800602d
 8005fdc:	08005fa9 	.word	0x08005fa9
 8005fe0:	08005fa9 	.word	0x08005fa9
 8005fe4:	08005fa9 	.word	0x08005fa9
 8005fe8:	08005fa9 	.word	0x08005fa9
 8005fec:	0800612d 	.word	0x0800612d
 8005ff0:	08006057 	.word	0x08006057
 8005ff4:	080060e7 	.word	0x080060e7
 8005ff8:	08005fa9 	.word	0x08005fa9
 8005ffc:	08005fa9 	.word	0x08005fa9
 8006000:	0800614f 	.word	0x0800614f
 8006004:	08005fa9 	.word	0x08005fa9
 8006008:	08006057 	.word	0x08006057
 800600c:	08005fa9 	.word	0x08005fa9
 8006010:	08005fa9 	.word	0x08005fa9
 8006014:	080060ef 	.word	0x080060ef
 8006018:	6833      	ldr	r3, [r6, #0]
 800601a:	1d1a      	adds	r2, r3, #4
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6032      	str	r2, [r6, #0]
 8006020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006028:	2301      	movs	r3, #1
 800602a:	e09d      	b.n	8006168 <_printf_i+0x1e8>
 800602c:	6833      	ldr	r3, [r6, #0]
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	1d19      	adds	r1, r3, #4
 8006032:	6031      	str	r1, [r6, #0]
 8006034:	0606      	lsls	r6, r0, #24
 8006036:	d501      	bpl.n	800603c <_printf_i+0xbc>
 8006038:	681d      	ldr	r5, [r3, #0]
 800603a:	e003      	b.n	8006044 <_printf_i+0xc4>
 800603c:	0645      	lsls	r5, r0, #25
 800603e:	d5fb      	bpl.n	8006038 <_printf_i+0xb8>
 8006040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006044:	2d00      	cmp	r5, #0
 8006046:	da03      	bge.n	8006050 <_printf_i+0xd0>
 8006048:	232d      	movs	r3, #45	@ 0x2d
 800604a:	426d      	negs	r5, r5
 800604c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006050:	4859      	ldr	r0, [pc, #356]	@ (80061b8 <_printf_i+0x238>)
 8006052:	230a      	movs	r3, #10
 8006054:	e011      	b.n	800607a <_printf_i+0xfa>
 8006056:	6821      	ldr	r1, [r4, #0]
 8006058:	6833      	ldr	r3, [r6, #0]
 800605a:	0608      	lsls	r0, r1, #24
 800605c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006060:	d402      	bmi.n	8006068 <_printf_i+0xe8>
 8006062:	0649      	lsls	r1, r1, #25
 8006064:	bf48      	it	mi
 8006066:	b2ad      	uxthmi	r5, r5
 8006068:	2f6f      	cmp	r7, #111	@ 0x6f
 800606a:	4853      	ldr	r0, [pc, #332]	@ (80061b8 <_printf_i+0x238>)
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	bf14      	ite	ne
 8006070:	230a      	movne	r3, #10
 8006072:	2308      	moveq	r3, #8
 8006074:	2100      	movs	r1, #0
 8006076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800607a:	6866      	ldr	r6, [r4, #4]
 800607c:	60a6      	str	r6, [r4, #8]
 800607e:	2e00      	cmp	r6, #0
 8006080:	bfa2      	ittt	ge
 8006082:	6821      	ldrge	r1, [r4, #0]
 8006084:	f021 0104 	bicge.w	r1, r1, #4
 8006088:	6021      	strge	r1, [r4, #0]
 800608a:	b90d      	cbnz	r5, 8006090 <_printf_i+0x110>
 800608c:	2e00      	cmp	r6, #0
 800608e:	d04b      	beq.n	8006128 <_printf_i+0x1a8>
 8006090:	4616      	mov	r6, r2
 8006092:	fbb5 f1f3 	udiv	r1, r5, r3
 8006096:	fb03 5711 	mls	r7, r3, r1, r5
 800609a:	5dc7      	ldrb	r7, [r0, r7]
 800609c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060a0:	462f      	mov	r7, r5
 80060a2:	42bb      	cmp	r3, r7
 80060a4:	460d      	mov	r5, r1
 80060a6:	d9f4      	bls.n	8006092 <_printf_i+0x112>
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d10b      	bne.n	80060c4 <_printf_i+0x144>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	07df      	lsls	r7, r3, #31
 80060b0:	d508      	bpl.n	80060c4 <_printf_i+0x144>
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	6861      	ldr	r1, [r4, #4]
 80060b6:	4299      	cmp	r1, r3
 80060b8:	bfde      	ittt	le
 80060ba:	2330      	movle	r3, #48	@ 0x30
 80060bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060c4:	1b92      	subs	r2, r2, r6
 80060c6:	6122      	str	r2, [r4, #16]
 80060c8:	f8cd a000 	str.w	sl, [sp]
 80060cc:	464b      	mov	r3, r9
 80060ce:	aa03      	add	r2, sp, #12
 80060d0:	4621      	mov	r1, r4
 80060d2:	4640      	mov	r0, r8
 80060d4:	f7ff fee6 	bl	8005ea4 <_printf_common>
 80060d8:	3001      	adds	r0, #1
 80060da:	d14a      	bne.n	8006172 <_printf_i+0x1f2>
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295
 80060e0:	b004      	add	sp, #16
 80060e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	f043 0320 	orr.w	r3, r3, #32
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	4833      	ldr	r0, [pc, #204]	@ (80061bc <_printf_i+0x23c>)
 80060f0:	2778      	movs	r7, #120	@ 0x78
 80060f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	6831      	ldr	r1, [r6, #0]
 80060fa:	061f      	lsls	r7, r3, #24
 80060fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006100:	d402      	bmi.n	8006108 <_printf_i+0x188>
 8006102:	065f      	lsls	r7, r3, #25
 8006104:	bf48      	it	mi
 8006106:	b2ad      	uxthmi	r5, r5
 8006108:	6031      	str	r1, [r6, #0]
 800610a:	07d9      	lsls	r1, r3, #31
 800610c:	bf44      	itt	mi
 800610e:	f043 0320 	orrmi.w	r3, r3, #32
 8006112:	6023      	strmi	r3, [r4, #0]
 8006114:	b11d      	cbz	r5, 800611e <_printf_i+0x19e>
 8006116:	2310      	movs	r3, #16
 8006118:	e7ac      	b.n	8006074 <_printf_i+0xf4>
 800611a:	4827      	ldr	r0, [pc, #156]	@ (80061b8 <_printf_i+0x238>)
 800611c:	e7e9      	b.n	80060f2 <_printf_i+0x172>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	f023 0320 	bic.w	r3, r3, #32
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	e7f6      	b.n	8006116 <_printf_i+0x196>
 8006128:	4616      	mov	r6, r2
 800612a:	e7bd      	b.n	80060a8 <_printf_i+0x128>
 800612c:	6833      	ldr	r3, [r6, #0]
 800612e:	6825      	ldr	r5, [r4, #0]
 8006130:	6961      	ldr	r1, [r4, #20]
 8006132:	1d18      	adds	r0, r3, #4
 8006134:	6030      	str	r0, [r6, #0]
 8006136:	062e      	lsls	r6, r5, #24
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	d501      	bpl.n	8006140 <_printf_i+0x1c0>
 800613c:	6019      	str	r1, [r3, #0]
 800613e:	e002      	b.n	8006146 <_printf_i+0x1c6>
 8006140:	0668      	lsls	r0, r5, #25
 8006142:	d5fb      	bpl.n	800613c <_printf_i+0x1bc>
 8006144:	8019      	strh	r1, [r3, #0]
 8006146:	2300      	movs	r3, #0
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	4616      	mov	r6, r2
 800614c:	e7bc      	b.n	80060c8 <_printf_i+0x148>
 800614e:	6833      	ldr	r3, [r6, #0]
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	6032      	str	r2, [r6, #0]
 8006154:	681e      	ldr	r6, [r3, #0]
 8006156:	6862      	ldr	r2, [r4, #4]
 8006158:	2100      	movs	r1, #0
 800615a:	4630      	mov	r0, r6
 800615c:	f7fa f858 	bl	8000210 <memchr>
 8006160:	b108      	cbz	r0, 8006166 <_printf_i+0x1e6>
 8006162:	1b80      	subs	r0, r0, r6
 8006164:	6060      	str	r0, [r4, #4]
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	6123      	str	r3, [r4, #16]
 800616a:	2300      	movs	r3, #0
 800616c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006170:	e7aa      	b.n	80060c8 <_printf_i+0x148>
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	4632      	mov	r2, r6
 8006176:	4649      	mov	r1, r9
 8006178:	4640      	mov	r0, r8
 800617a:	47d0      	blx	sl
 800617c:	3001      	adds	r0, #1
 800617e:	d0ad      	beq.n	80060dc <_printf_i+0x15c>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	079b      	lsls	r3, r3, #30
 8006184:	d413      	bmi.n	80061ae <_printf_i+0x22e>
 8006186:	68e0      	ldr	r0, [r4, #12]
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	4298      	cmp	r0, r3
 800618c:	bfb8      	it	lt
 800618e:	4618      	movlt	r0, r3
 8006190:	e7a6      	b.n	80060e0 <_printf_i+0x160>
 8006192:	2301      	movs	r3, #1
 8006194:	4632      	mov	r2, r6
 8006196:	4649      	mov	r1, r9
 8006198:	4640      	mov	r0, r8
 800619a:	47d0      	blx	sl
 800619c:	3001      	adds	r0, #1
 800619e:	d09d      	beq.n	80060dc <_printf_i+0x15c>
 80061a0:	3501      	adds	r5, #1
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	9903      	ldr	r1, [sp, #12]
 80061a6:	1a5b      	subs	r3, r3, r1
 80061a8:	42ab      	cmp	r3, r5
 80061aa:	dcf2      	bgt.n	8006192 <_printf_i+0x212>
 80061ac:	e7eb      	b.n	8006186 <_printf_i+0x206>
 80061ae:	2500      	movs	r5, #0
 80061b0:	f104 0619 	add.w	r6, r4, #25
 80061b4:	e7f5      	b.n	80061a2 <_printf_i+0x222>
 80061b6:	bf00      	nop
 80061b8:	080067fe 	.word	0x080067fe
 80061bc:	0800680f 	.word	0x0800680f

080061c0 <__sflush_r>:
 80061c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c8:	0716      	lsls	r6, r2, #28
 80061ca:	4605      	mov	r5, r0
 80061cc:	460c      	mov	r4, r1
 80061ce:	d454      	bmi.n	800627a <__sflush_r+0xba>
 80061d0:	684b      	ldr	r3, [r1, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	dc02      	bgt.n	80061dc <__sflush_r+0x1c>
 80061d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dd48      	ble.n	800626e <__sflush_r+0xae>
 80061dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061de:	2e00      	cmp	r6, #0
 80061e0:	d045      	beq.n	800626e <__sflush_r+0xae>
 80061e2:	2300      	movs	r3, #0
 80061e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061e8:	682f      	ldr	r7, [r5, #0]
 80061ea:	6a21      	ldr	r1, [r4, #32]
 80061ec:	602b      	str	r3, [r5, #0]
 80061ee:	d030      	beq.n	8006252 <__sflush_r+0x92>
 80061f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	0759      	lsls	r1, r3, #29
 80061f6:	d505      	bpl.n	8006204 <__sflush_r+0x44>
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	1ad2      	subs	r2, r2, r3
 80061fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061fe:	b10b      	cbz	r3, 8006204 <__sflush_r+0x44>
 8006200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	2300      	movs	r3, #0
 8006206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006208:	6a21      	ldr	r1, [r4, #32]
 800620a:	4628      	mov	r0, r5
 800620c:	47b0      	blx	r6
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	d106      	bne.n	8006222 <__sflush_r+0x62>
 8006214:	6829      	ldr	r1, [r5, #0]
 8006216:	291d      	cmp	r1, #29
 8006218:	d82b      	bhi.n	8006272 <__sflush_r+0xb2>
 800621a:	4a2a      	ldr	r2, [pc, #168]	@ (80062c4 <__sflush_r+0x104>)
 800621c:	410a      	asrs	r2, r1
 800621e:	07d6      	lsls	r6, r2, #31
 8006220:	d427      	bmi.n	8006272 <__sflush_r+0xb2>
 8006222:	2200      	movs	r2, #0
 8006224:	6062      	str	r2, [r4, #4]
 8006226:	04d9      	lsls	r1, r3, #19
 8006228:	6922      	ldr	r2, [r4, #16]
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	d504      	bpl.n	8006238 <__sflush_r+0x78>
 800622e:	1c42      	adds	r2, r0, #1
 8006230:	d101      	bne.n	8006236 <__sflush_r+0x76>
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	b903      	cbnz	r3, 8006238 <__sflush_r+0x78>
 8006236:	6560      	str	r0, [r4, #84]	@ 0x54
 8006238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800623a:	602f      	str	r7, [r5, #0]
 800623c:	b1b9      	cbz	r1, 800626e <__sflush_r+0xae>
 800623e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006242:	4299      	cmp	r1, r3
 8006244:	d002      	beq.n	800624c <__sflush_r+0x8c>
 8006246:	4628      	mov	r0, r5
 8006248:	f7ff fa92 	bl	8005770 <_free_r>
 800624c:	2300      	movs	r3, #0
 800624e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006250:	e00d      	b.n	800626e <__sflush_r+0xae>
 8006252:	2301      	movs	r3, #1
 8006254:	4628      	mov	r0, r5
 8006256:	47b0      	blx	r6
 8006258:	4602      	mov	r2, r0
 800625a:	1c50      	adds	r0, r2, #1
 800625c:	d1c9      	bne.n	80061f2 <__sflush_r+0x32>
 800625e:	682b      	ldr	r3, [r5, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0c6      	beq.n	80061f2 <__sflush_r+0x32>
 8006264:	2b1d      	cmp	r3, #29
 8006266:	d001      	beq.n	800626c <__sflush_r+0xac>
 8006268:	2b16      	cmp	r3, #22
 800626a:	d11e      	bne.n	80062aa <__sflush_r+0xea>
 800626c:	602f      	str	r7, [r5, #0]
 800626e:	2000      	movs	r0, #0
 8006270:	e022      	b.n	80062b8 <__sflush_r+0xf8>
 8006272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006276:	b21b      	sxth	r3, r3
 8006278:	e01b      	b.n	80062b2 <__sflush_r+0xf2>
 800627a:	690f      	ldr	r7, [r1, #16]
 800627c:	2f00      	cmp	r7, #0
 800627e:	d0f6      	beq.n	800626e <__sflush_r+0xae>
 8006280:	0793      	lsls	r3, r2, #30
 8006282:	680e      	ldr	r6, [r1, #0]
 8006284:	bf08      	it	eq
 8006286:	694b      	ldreq	r3, [r1, #20]
 8006288:	600f      	str	r7, [r1, #0]
 800628a:	bf18      	it	ne
 800628c:	2300      	movne	r3, #0
 800628e:	eba6 0807 	sub.w	r8, r6, r7
 8006292:	608b      	str	r3, [r1, #8]
 8006294:	f1b8 0f00 	cmp.w	r8, #0
 8006298:	dde9      	ble.n	800626e <__sflush_r+0xae>
 800629a:	6a21      	ldr	r1, [r4, #32]
 800629c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800629e:	4643      	mov	r3, r8
 80062a0:	463a      	mov	r2, r7
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b0      	blx	r6
 80062a6:	2800      	cmp	r0, #0
 80062a8:	dc08      	bgt.n	80062bc <__sflush_r+0xfc>
 80062aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	f04f 30ff 	mov.w	r0, #4294967295
 80062b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062bc:	4407      	add	r7, r0
 80062be:	eba8 0800 	sub.w	r8, r8, r0
 80062c2:	e7e7      	b.n	8006294 <__sflush_r+0xd4>
 80062c4:	dfbffffe 	.word	0xdfbffffe

080062c8 <_fflush_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	690b      	ldr	r3, [r1, #16]
 80062cc:	4605      	mov	r5, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	b913      	cbnz	r3, 80062d8 <_fflush_r+0x10>
 80062d2:	2500      	movs	r5, #0
 80062d4:	4628      	mov	r0, r5
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	b118      	cbz	r0, 80062e2 <_fflush_r+0x1a>
 80062da:	6a03      	ldr	r3, [r0, #32]
 80062dc:	b90b      	cbnz	r3, 80062e2 <_fflush_r+0x1a>
 80062de:	f7fe ffab 	bl	8005238 <__sinit>
 80062e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f3      	beq.n	80062d2 <_fflush_r+0xa>
 80062ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062ec:	07d0      	lsls	r0, r2, #31
 80062ee:	d404      	bmi.n	80062fa <_fflush_r+0x32>
 80062f0:	0599      	lsls	r1, r3, #22
 80062f2:	d402      	bmi.n	80062fa <_fflush_r+0x32>
 80062f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062f6:	f7ff fa12 	bl	800571e <__retarget_lock_acquire_recursive>
 80062fa:	4628      	mov	r0, r5
 80062fc:	4621      	mov	r1, r4
 80062fe:	f7ff ff5f 	bl	80061c0 <__sflush_r>
 8006302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006304:	07da      	lsls	r2, r3, #31
 8006306:	4605      	mov	r5, r0
 8006308:	d4e4      	bmi.n	80062d4 <_fflush_r+0xc>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	059b      	lsls	r3, r3, #22
 800630e:	d4e1      	bmi.n	80062d4 <_fflush_r+0xc>
 8006310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006312:	f7ff fa05 	bl	8005720 <__retarget_lock_release_recursive>
 8006316:	e7dd      	b.n	80062d4 <_fflush_r+0xc>

08006318 <fiprintf>:
 8006318:	b40e      	push	{r1, r2, r3}
 800631a:	b503      	push	{r0, r1, lr}
 800631c:	4601      	mov	r1, r0
 800631e:	ab03      	add	r3, sp, #12
 8006320:	4805      	ldr	r0, [pc, #20]	@ (8006338 <fiprintf+0x20>)
 8006322:	f853 2b04 	ldr.w	r2, [r3], #4
 8006326:	6800      	ldr	r0, [r0, #0]
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	f7ff fca3 	bl	8005c74 <_vfiprintf_r>
 800632e:	b002      	add	sp, #8
 8006330:	f85d eb04 	ldr.w	lr, [sp], #4
 8006334:	b003      	add	sp, #12
 8006336:	4770      	bx	lr
 8006338:	20000018 	.word	0x20000018

0800633c <__swhatbuf_r>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	460c      	mov	r4, r1
 8006340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006344:	2900      	cmp	r1, #0
 8006346:	b096      	sub	sp, #88	@ 0x58
 8006348:	4615      	mov	r5, r2
 800634a:	461e      	mov	r6, r3
 800634c:	da0d      	bge.n	800636a <__swhatbuf_r+0x2e>
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006354:	f04f 0100 	mov.w	r1, #0
 8006358:	bf14      	ite	ne
 800635a:	2340      	movne	r3, #64	@ 0x40
 800635c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006360:	2000      	movs	r0, #0
 8006362:	6031      	str	r1, [r6, #0]
 8006364:	602b      	str	r3, [r5, #0]
 8006366:	b016      	add	sp, #88	@ 0x58
 8006368:	bd70      	pop	{r4, r5, r6, pc}
 800636a:	466a      	mov	r2, sp
 800636c:	f000 f862 	bl	8006434 <_fstat_r>
 8006370:	2800      	cmp	r0, #0
 8006372:	dbec      	blt.n	800634e <__swhatbuf_r+0x12>
 8006374:	9901      	ldr	r1, [sp, #4]
 8006376:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800637a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800637e:	4259      	negs	r1, r3
 8006380:	4159      	adcs	r1, r3
 8006382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006386:	e7eb      	b.n	8006360 <__swhatbuf_r+0x24>

08006388 <__smakebuf_r>:
 8006388:	898b      	ldrh	r3, [r1, #12]
 800638a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800638c:	079d      	lsls	r5, r3, #30
 800638e:	4606      	mov	r6, r0
 8006390:	460c      	mov	r4, r1
 8006392:	d507      	bpl.n	80063a4 <__smakebuf_r+0x1c>
 8006394:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	2301      	movs	r3, #1
 800639e:	6163      	str	r3, [r4, #20]
 80063a0:	b003      	add	sp, #12
 80063a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a4:	ab01      	add	r3, sp, #4
 80063a6:	466a      	mov	r2, sp
 80063a8:	f7ff ffc8 	bl	800633c <__swhatbuf_r>
 80063ac:	9f00      	ldr	r7, [sp, #0]
 80063ae:	4605      	mov	r5, r0
 80063b0:	4639      	mov	r1, r7
 80063b2:	4630      	mov	r0, r6
 80063b4:	f7ff fa50 	bl	8005858 <_malloc_r>
 80063b8:	b948      	cbnz	r0, 80063ce <__smakebuf_r+0x46>
 80063ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063be:	059a      	lsls	r2, r3, #22
 80063c0:	d4ee      	bmi.n	80063a0 <__smakebuf_r+0x18>
 80063c2:	f023 0303 	bic.w	r3, r3, #3
 80063c6:	f043 0302 	orr.w	r3, r3, #2
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	e7e2      	b.n	8006394 <__smakebuf_r+0xc>
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	6020      	str	r0, [r4, #0]
 80063d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d6:	81a3      	strh	r3, [r4, #12]
 80063d8:	9b01      	ldr	r3, [sp, #4]
 80063da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063de:	b15b      	cbz	r3, 80063f8 <__smakebuf_r+0x70>
 80063e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e4:	4630      	mov	r0, r6
 80063e6:	f000 f837 	bl	8006458 <_isatty_r>
 80063ea:	b128      	cbz	r0, 80063f8 <__smakebuf_r+0x70>
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	81a3      	strh	r3, [r4, #12]
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	431d      	orrs	r5, r3
 80063fc:	81a5      	strh	r5, [r4, #12]
 80063fe:	e7cf      	b.n	80063a0 <__smakebuf_r+0x18>

08006400 <memmove>:
 8006400:	4288      	cmp	r0, r1
 8006402:	b510      	push	{r4, lr}
 8006404:	eb01 0402 	add.w	r4, r1, r2
 8006408:	d902      	bls.n	8006410 <memmove+0x10>
 800640a:	4284      	cmp	r4, r0
 800640c:	4623      	mov	r3, r4
 800640e:	d807      	bhi.n	8006420 <memmove+0x20>
 8006410:	1e43      	subs	r3, r0, #1
 8006412:	42a1      	cmp	r1, r4
 8006414:	d008      	beq.n	8006428 <memmove+0x28>
 8006416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800641a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800641e:	e7f8      	b.n	8006412 <memmove+0x12>
 8006420:	4402      	add	r2, r0
 8006422:	4601      	mov	r1, r0
 8006424:	428a      	cmp	r2, r1
 8006426:	d100      	bne.n	800642a <memmove+0x2a>
 8006428:	bd10      	pop	{r4, pc}
 800642a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800642e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006432:	e7f7      	b.n	8006424 <memmove+0x24>

08006434 <_fstat_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4d07      	ldr	r5, [pc, #28]	@ (8006454 <_fstat_r+0x20>)
 8006438:	2300      	movs	r3, #0
 800643a:	4604      	mov	r4, r0
 800643c:	4608      	mov	r0, r1
 800643e:	4611      	mov	r1, r2
 8006440:	602b      	str	r3, [r5, #0]
 8006442:	f7fb fd13 	bl	8001e6c <_fstat>
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	d102      	bne.n	8006450 <_fstat_r+0x1c>
 800644a:	682b      	ldr	r3, [r5, #0]
 800644c:	b103      	cbz	r3, 8006450 <_fstat_r+0x1c>
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	bd38      	pop	{r3, r4, r5, pc}
 8006452:	bf00      	nop
 8006454:	200003c4 	.word	0x200003c4

08006458 <_isatty_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d06      	ldr	r5, [pc, #24]	@ (8006474 <_isatty_r+0x1c>)
 800645c:	2300      	movs	r3, #0
 800645e:	4604      	mov	r4, r0
 8006460:	4608      	mov	r0, r1
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	f7fb fd12 	bl	8001e8c <_isatty>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_isatty_r+0x1a>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_isatty_r+0x1a>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	200003c4 	.word	0x200003c4

08006478 <_sbrk_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d06      	ldr	r5, [pc, #24]	@ (8006494 <_sbrk_r+0x1c>)
 800647c:	2300      	movs	r3, #0
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	f7fb fd1a 	bl	8001ebc <_sbrk>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d102      	bne.n	8006492 <_sbrk_r+0x1a>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	b103      	cbz	r3, 8006492 <_sbrk_r+0x1a>
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	200003c4 	.word	0x200003c4

08006498 <memcpy>:
 8006498:	440a      	add	r2, r1
 800649a:	4291      	cmp	r1, r2
 800649c:	f100 33ff 	add.w	r3, r0, #4294967295
 80064a0:	d100      	bne.n	80064a4 <memcpy+0xc>
 80064a2:	4770      	bx	lr
 80064a4:	b510      	push	{r4, lr}
 80064a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ae:	4291      	cmp	r1, r2
 80064b0:	d1f9      	bne.n	80064a6 <memcpy+0xe>
 80064b2:	bd10      	pop	{r4, pc}

080064b4 <abort>:
 80064b4:	b508      	push	{r3, lr}
 80064b6:	2006      	movs	r0, #6
 80064b8:	f000 f85a 	bl	8006570 <raise>
 80064bc:	2001      	movs	r0, #1
 80064be:	f7fb fc85 	bl	8001dcc <_exit>

080064c2 <_realloc_r>:
 80064c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c6:	4680      	mov	r8, r0
 80064c8:	4615      	mov	r5, r2
 80064ca:	460c      	mov	r4, r1
 80064cc:	b921      	cbnz	r1, 80064d8 <_realloc_r+0x16>
 80064ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d2:	4611      	mov	r1, r2
 80064d4:	f7ff b9c0 	b.w	8005858 <_malloc_r>
 80064d8:	b92a      	cbnz	r2, 80064e6 <_realloc_r+0x24>
 80064da:	f7ff f949 	bl	8005770 <_free_r>
 80064de:	2400      	movs	r4, #0
 80064e0:	4620      	mov	r0, r4
 80064e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e6:	f000 f85f 	bl	80065a8 <_malloc_usable_size_r>
 80064ea:	4285      	cmp	r5, r0
 80064ec:	4606      	mov	r6, r0
 80064ee:	d802      	bhi.n	80064f6 <_realloc_r+0x34>
 80064f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80064f4:	d8f4      	bhi.n	80064e0 <_realloc_r+0x1e>
 80064f6:	4629      	mov	r1, r5
 80064f8:	4640      	mov	r0, r8
 80064fa:	f7ff f9ad 	bl	8005858 <_malloc_r>
 80064fe:	4607      	mov	r7, r0
 8006500:	2800      	cmp	r0, #0
 8006502:	d0ec      	beq.n	80064de <_realloc_r+0x1c>
 8006504:	42b5      	cmp	r5, r6
 8006506:	462a      	mov	r2, r5
 8006508:	4621      	mov	r1, r4
 800650a:	bf28      	it	cs
 800650c:	4632      	movcs	r2, r6
 800650e:	f7ff ffc3 	bl	8006498 <memcpy>
 8006512:	4621      	mov	r1, r4
 8006514:	4640      	mov	r0, r8
 8006516:	f7ff f92b 	bl	8005770 <_free_r>
 800651a:	463c      	mov	r4, r7
 800651c:	e7e0      	b.n	80064e0 <_realloc_r+0x1e>

0800651e <_raise_r>:
 800651e:	291f      	cmp	r1, #31
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4605      	mov	r5, r0
 8006524:	460c      	mov	r4, r1
 8006526:	d904      	bls.n	8006532 <_raise_r+0x14>
 8006528:	2316      	movs	r3, #22
 800652a:	6003      	str	r3, [r0, #0]
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006534:	b112      	cbz	r2, 800653c <_raise_r+0x1e>
 8006536:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800653a:	b94b      	cbnz	r3, 8006550 <_raise_r+0x32>
 800653c:	4628      	mov	r0, r5
 800653e:	f000 f831 	bl	80065a4 <_getpid_r>
 8006542:	4622      	mov	r2, r4
 8006544:	4601      	mov	r1, r0
 8006546:	4628      	mov	r0, r5
 8006548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800654c:	f000 b818 	b.w	8006580 <_kill_r>
 8006550:	2b01      	cmp	r3, #1
 8006552:	d00a      	beq.n	800656a <_raise_r+0x4c>
 8006554:	1c59      	adds	r1, r3, #1
 8006556:	d103      	bne.n	8006560 <_raise_r+0x42>
 8006558:	2316      	movs	r3, #22
 800655a:	6003      	str	r3, [r0, #0]
 800655c:	2001      	movs	r0, #1
 800655e:	e7e7      	b.n	8006530 <_raise_r+0x12>
 8006560:	2100      	movs	r1, #0
 8006562:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006566:	4620      	mov	r0, r4
 8006568:	4798      	blx	r3
 800656a:	2000      	movs	r0, #0
 800656c:	e7e0      	b.n	8006530 <_raise_r+0x12>
	...

08006570 <raise>:
 8006570:	4b02      	ldr	r3, [pc, #8]	@ (800657c <raise+0xc>)
 8006572:	4601      	mov	r1, r0
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	f7ff bfd2 	b.w	800651e <_raise_r>
 800657a:	bf00      	nop
 800657c:	20000018 	.word	0x20000018

08006580 <_kill_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4d07      	ldr	r5, [pc, #28]	@ (80065a0 <_kill_r+0x20>)
 8006584:	2300      	movs	r3, #0
 8006586:	4604      	mov	r4, r0
 8006588:	4608      	mov	r0, r1
 800658a:	4611      	mov	r1, r2
 800658c:	602b      	str	r3, [r5, #0]
 800658e:	f7fb fc0d 	bl	8001dac <_kill>
 8006592:	1c43      	adds	r3, r0, #1
 8006594:	d102      	bne.n	800659c <_kill_r+0x1c>
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	b103      	cbz	r3, 800659c <_kill_r+0x1c>
 800659a:	6023      	str	r3, [r4, #0]
 800659c:	bd38      	pop	{r3, r4, r5, pc}
 800659e:	bf00      	nop
 80065a0:	200003c4 	.word	0x200003c4

080065a4 <_getpid_r>:
 80065a4:	f7fb bbfa 	b.w	8001d9c <_getpid>

080065a8 <_malloc_usable_size_r>:
 80065a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ac:	1f18      	subs	r0, r3, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bfbc      	itt	lt
 80065b2:	580b      	ldrlt	r3, [r1, r0]
 80065b4:	18c0      	addlt	r0, r0, r3
 80065b6:	4770      	bx	lr

080065b8 <_init>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	bf00      	nop
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr

080065c4 <_fini>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	bf00      	nop
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr
